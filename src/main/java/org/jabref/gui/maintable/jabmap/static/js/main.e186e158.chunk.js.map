{"version":3,"sources":["Node.js","Edge.js","MindMap.js","KonvaReferencesTable.js","WindowDimensions.js","ToolBar.js","NodeInfoPanel.js","ReferencesTable.js","App.js","serviceWorker.js","index.js"],"names":["Node","node","updateEdges","id","colors","setSelectedNode","selectedNodeId","updateNode","isInSearch","label","bibEntryId","x","x_pos","y","y_pos","draggable","onDragMove","e","target","onClick","onMouseEnter","getStage","container","style","cursor","onMouseLeave","radius","width","height","offsetX","offsetY","cornerRadius","fill","stroke","undefined","colour","strokeWidth","text","align","verticalAlign","citationKey","Edge","x1","y1","x2","y2","pts","st","ct","en","lineCap","sceneFunc","context","shape","beginPath","moveTo","bezierCurveTo","strokeShape","MindMap","nodes","edges","makeStyles","canvas","left","position","useStyles","map","edge","startX","startY","endX","endY","key","React","memo","references","addNode","setReferences","layerRef","stageRef","arrLength","table","top","maxWidth","overflow","tableLayout","backgroundColor","length","elRefs","useRef","current","Array","_","i","createRef","reference","index","title","opacity","ref","onDragEnd","draw","getPointerPosition","citekey","getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","saveMap","deleteNode","searchNodes","linking","setLinking","inputRef","toolbar","textAlign","onkeydown","keyCode","ctrlKey","preventDefault","focus","Toolbar","className","component","Paper","padding","IconButton","size","aria-label","color","paddingLeft","type","onChange","placeholder","NodeInfoPanel","changeNodeColor","classes","panel","right","border","labelInputRef","inputValue","setInputValue","Card","Typography","gutterBottom","variant","TextField","marginBottom","marginLeft","InputLabelProps","shrink","value","TableRow","TableCell","scope","Table","margin","TableBody","author","year","draggedRow","maxHeight","hover","onDragStart","App","setNodes","setEdges","selectedNode","handleSelected","selected","addEdge","newNode","newNodes","updateSearchIndex","idx","forEach","indexOf","wrapper","fetchMap","a","fetch","then","res","json","data","node1","find","node1_Id","node2","node2_Id","startId","endId","catch","console","log","fetchReferences","bibData","nodeLabel","Math","floor","random","newEdge","ToolBar","convertedEdges","payload","JSON","stringify","method","headers","body","filter","event","searchterm","indx","push","onDrop","setPointersPositions","onDragOver","newEdges","getReferenceById","nodeId","newColor","updateNodeColor","hex","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e186e158.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Ellipse, Text, Group, Rect } from 'react-konva';\r\n\r\n\r\nconst Node = ({node, id, colors, updateEdges, setSelectedNode, selectedNodeId, updateNode, label, bibEntryId, isInSearch: isInSearch}) => {\r\n\r\n    const handleDragMove = (e) => {\r\n        node.x_pos = e.target.x()\r\n        node.y_pos = e.target.y()\r\n      updateNode(node);\r\n      updateEdges(node.id, e.target.x(), e.target.y());\r\n    }\r\n\r\n    const width = 150\r\n    const height = 70\r\n    return (\r\n      <Group\r\n        id={node.id}\r\n        x={node.x_pos}\r\n        y={node.y_pos}\r\n        draggable\r\n        onDragMove={handleDragMove}\r\n        onClick={() => setSelectedNode(node)}\r\n        onMouseEnter={(e) => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"pointer\";\r\n        }}\r\n        onMouseLeave={e => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"default\";\r\n        }}\r\n      >\r\n        <Rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={width}\r\n          height={height}\r\n          offsetX={width/2}\r\n          offsetY={height/2}\r\n          cornerRadius={20}\r\n          fill={isInSearch ? \"#3f51b5\" : selectedNodeId === node.id ? \"#a2b8e5\" : \"white\"}\r\n          stroke={node.colour === undefined ? \"#6E6E6E\" : node.colour}\r\n          strokeWidth={4}\r\n        />\r\n        <Text text={node.label}\r\n          offsetX={width/2}\r\n          offsetY={height/2 + 10}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={width}\r\n        height={height}\r\n        />\r\n          <Group\r\n              width={width}\r\n              height={height}\r\n              offsetX={width/2 -10}\r\n              offsetY={-height/2 + 20}\r\n          >\r\n              {node.citationKey && <Rect\r\n              width={10}\r\n              height={10}\r\n              fill={\"red\"}\r\n              />}\r\n          </Group>\r\n      </Group>\r\n    );\r\n  };\r\n  export default Node;\r\n","import React from 'react';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\n\r\nconst Edge = ({x1, y1, x2, y2}) => {\r\n    let pts = { st: [x1, y1],\r\n        ct: [x1, y2, x1, y2],\r\n        en: [x2, y2]\r\n    }\r\n\r\n    return (\r\n        // <Line  points={[x1, y1, x2, y2]} stroke=\"blue\"/>\r\n        <Shape stroke={\"#50618F\"}\r\n                strokeWidth={6}\r\n                lineCap={\"round\"}\r\n                sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(...pts.st);\r\n                    context.bezierCurveTo(...pts.ct,...pts.en);\r\n                    context.strokeShape(shape);\r\n                }}>\r\n        </Shape>\r\n    )\r\n}\r\n\r\nexport default Edge;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Node from \"./Node\";\r\nimport Edge from \"./Edge\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Group } from 'react-konva';\r\n\r\n\r\nconst MindMap = ({nodes, edges, updateEdges, setSelectedNode, selectedNodeId, updateNode}) => {\r\n    const useStyles = makeStyles({\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Group x={310}>\r\n            {edges.map((edge) =>\r\n                <Edge x1={edge.startX} y1={edge.startY} x2={edge.endX} y2={edge.endY}/>\r\n            )}\r\n            {nodes.map((node) =>\r\n                <Node node={node} key={node.id} label={node.label} colors={node.colors} id={node.id} x={node.x_pos} y={node.y_pos} colour={node.colour} updateEdges={updateEdges} selectedNodeId={selectedNodeId} setSelectedNode={setSelectedNode} updateNode={updateNode} isInSearch = {node.isInSearch}/>\r\n            )}\r\n        </ Group>\r\n    )\r\n}\r\n\r\nexport default MindMap;\r\n","import React, {\r\n    createRef,\r\n    useRef\r\n} from \"react\";\r\nimport {Paper, TableContainer, Table, TableCell, TableBody, TableRow, TableHead} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Rect,\r\n    Group,\r\n    Text\r\n} from 'react-konva';\r\n\r\n\r\n\r\n\r\nconst KonvaReferencesTable = ({references, setReferences, addNode, layerRef, stageRef}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            maxWidth: \"25%\",\r\n            // minWidth: \"200px\",\r\n            overflow: \"hidden\",\r\n            tableLayout: \"fixed\",\r\n            height: \"100vh\",\r\n            backgroundColor: \"#e1e1e1\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const width = 300;\r\n    const height = 100;\r\n    const margin = 10;\r\n\r\n    const arrLength = references.length;\r\n    const elRefs = React.useRef([]);\r\n\r\n    if (elRefs.current.length !== arrLength) {\r\n        // add or remove refs\r\n        elRefs.current = Array(arrLength).fill().map((_, i) => elRefs.current[i] || createRef());\r\n    }\r\n\r\n    //console.log(references)\r\n    //Rendered table using Material UI library\r\n    return(\r\n        <Group>\r\n            {references.map((reference, index) => {\r\n                return (\r\n                <Group>\r\n                    <Group\r\n                        y={index * (height + margin)}>\r\n                        <Rect\r\n                            width={width}\r\n                            height={height}\r\n                            fill={\"#dddddd\"}\r\n                            // opacity={0.5}\r\n                        />\r\n\r\n                        <Text\r\n                            text={reference.title}\r\n                            x={width / 2}\r\n                            y={height / 2}\r\n                            // align=\"center\"\r\n                            // verticalAlign=\"middle\"\r\n                            width={100}\r\n                            height={60}\r\n                        />\r\n                    </Group>\r\n\r\n                    {/*DRAGGABLE VERSION*/}\r\n                    <Group\r\n                        // y={index * (height + margin)}\r\n                        opacity={0.5}\r\n                        draggable\r\n                        ref={elRefs.current[index]}\r\n                        position={{x:0, y: index * (height + margin)}}\r\n                        onDragEnd={() => {\r\n                            //console.log(elRefs.current[index])\r\n                            elRefs.current[index].current.position({x : 0, y : index * (height + margin)})\r\n                            //console.log(layerRef)\r\n                            layerRef.current.draw()\r\n                            const {x, y} = stageRef.current.getPointerPosition()\r\n                            addNode(reference, x - 300, y, reference.citekey)\r\n                        }}>\r\n                        <Rect\r\n                            width={width}\r\n                            height={height}\r\n                            fill={\"#dddddd\"}\r\n                        />\r\n\r\n                        <Text\r\n                            text={reference.title}\r\n                            x={width / 2}\r\n                            y={height / 2}\r\n                            // align=\"center\"\r\n                            // verticalAlign=\"middle\"\r\n                            width={100}\r\n                            height={60}\r\n                        />\r\n                    </Group>\r\n                </ Group>\r\n                )\r\n            })}\r\n\r\n        </Group>\r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(KonvaReferencesTable)\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\r\n    return {\r\n        windowWidth,\r\n        windowHeight\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport React, {useRef } from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport './toolbar.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport HeightIcon from '@material-ui/icons/Height';\r\n\r\n// const Toolbar = ({nodes, edges, setNodes, setEdges, getNodeById, selectedNodeId, globalNodeIdCounter, setGlobalNodeIdCounter}) => {\r\n\r\n\r\nconst MindMapToolbar = ({addNode, saveMap, deleteNode, searchNodes, linking, setLinking}) => {\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        toolbar: {\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const inputRef = useRef(null);\r\n\r\n\r\n     window.onkeydown = function(e)  {\r\n        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)){\r\n            // listen to ctrl + F\r\n            e.preventDefault();\r\n            inputRef.current.focus();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Toolbar className = 'Toolbar-proportions' component = { Paper }>\r\n        <div style={{ padding: '0.5em' }}>\r\n            {/*<div style={{  borderRight: '0.1em solid grey', padding: '0.5em' }}>*/}\r\n            <IconButton size=\"small\" aria-label = \"add\" onClick={() => addNode()} >\r\n                <AddIcon/>\r\n            </IconButton>\r\n            <IconButton size=\"small\" onClick={() => setLinking(!linking)} color={linking ? 'primary' : 'default'} >\r\n                <HeightIcon />\r\n            </IconButton>\r\n            <IconButton size=\"small\" onClick={deleteNode}>\r\n                    <DeleteOutlineIcon/>\r\n            </IconButton>\r\n        </div>\r\n        {/*<div style={{ borderRight: '0.1em solid grey', padding: '0.5em' }}>*/}\r\n        {/*    <IconButton size=\"small\" style={{marginRight: 10}}>*/}\r\n        {/*        <ErrorOutlineIcon/>*/}\r\n        {/*    </IconButton>*/}\r\n        {/*    <IconButton size=\"small\" >*/}\r\n        {/*        <StarBorderIcon/>*/}\r\n        {/*    </IconButton>*/}\r\n        {/*</div>*/}\r\n            <IconButton size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <SaveIcon />\r\n            </IconButton>\r\n        <div style={{ align: \"right\",  padding: '0.5em' }}>\r\n            {/*<select style={{ border: 'none', textAlign: 'centre', fontSize: 12, marginRight: 50, marginLeft:30 }} >*/}\r\n            {/*<option value = \"noFilter\"> No Filter </option>*/}\r\n            {/*    <option value = \"highPriority\"> High Priority </option>*/}\r\n            {/*    <option value = \"favourites\"> Low Priority </option>*/}\r\n            {/*    <option value = \"favourites\"> Favourites </option>*/}\r\n            {/*</select>*/}\r\n            <input type='text'  id='searchnode' onChange={searchNodes}  ref={inputRef } placeholder=\"Node Search\" size='30'  />\r\n        </div>\r\n    </Toolbar>\r\n    )\r\n}\r\n\r\nexport default React.memo(MindMapToolbar);\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React\r\n    , {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport InputLabel\r\n    from \"@material-ui/core/InputLabel\";\r\nimport FormControl\r\n    from \"@material-ui/core/FormControl\";\r\nimport Input\r\n    from \"@material-ui/core/Input\";\r\nimport FormHelperText\r\n    from \"@material-ui/core/FormHelperText\";\r\nimport { CirclePicker } from 'react-color';\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    CardHeader\r\n} from \"@material-ui/core\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport TextField\r\n    from \"@material-ui/core/TextField\";\r\n\r\nconst NodeInfoPanel = ({node, reference, updateNode, changeNodeColor}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n       panel: {\r\n            position: \"absolute\",\r\n           top: 74,\r\n           right: 10,\r\n           width: \"300px\",\r\n           backgroundColor: \"white\",\r\n\r\n           '& td': {\r\n               border: \"none\",\r\n               padding: \"10px\"\r\n           },\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const labelInputRef = useRef();\r\n\r\n    const [inputValue, setInputValue] = useState();\r\n    useEffect(() => {\r\n        setInputValue(node.label)\r\n        labelInputRef.current.focus();\r\n    }, [node]);\r\n\r\n    const updateValue = (e) => {\r\n        setInputValue(e.target.value);\r\n        node.label = e.target.value;\r\n        updateNode(node);\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.panel}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                Node Info\r\n            </Typography>\r\n            <TextField style={{ width:\"calc(100% - 20px)\", marginBottom:\"10px\", marginLeft:\"10px\"}}  InputLabelProps={{shrink: true,}} id=\"standard-basic\" label=\"Label\" value={inputValue} type=\"text\" inputRef={labelInputRef} onChange={updateValue}/>\r\n            <TableRow key=\"colorEditor\">\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\", color: \"#3f51b5\"}}>\r\n                        Color:\r\n                    </TableCell>\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\"}}>\r\n                    {/*<input id='nodeColor' type=\"color\" value={ node.colour === undefined? 'black': node.colour} onChange = {changeNodeColor}></input>*/}\r\n                    <CirclePicker colors={['#BA1D2A', '#FC6A38', '#55773B', '#279DA3', '#0E5756']} onChange={changeNodeColor}/>\r\n                    </TableCell>\r\n                </TableRow>\r\n\r\n            {reference &&\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <Typography gutterBottom style={{paddingLeft: \"10px\", margin: 0}} variant=\"h5\" component=\"h5\" >\r\n                    BibEntry\r\n                </Typography>\r\n                <TableBody>\r\n                     <TableRow key={reference.title}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Title:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.title}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.author}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Author:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.author}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.year}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Year:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.year}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NodeInfoPanel;\r\n","import React, {useRef} from \"react\";\r\nimport {Paper, TableContainer, Table, TableCell, TableBody, TableRow, TableHead} from \"@material-ui/core\";\r\nimport \"./ReferencesTable.css\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useWindowDimensions\r\n    from \"./WindowDimensions\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\n\r\n\r\n\r\n\r\nconst ReferencesTable = ({references, setReferences, draggedRow, addNode}) => {\r\n\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n\r\n    return (\r\n        <div className=\"Table-proportions\"style={{maxHeight:windowHeight - 70}}>\r\n            <Card style={{width: \"99.5%\"}}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                    References\r\n                </Typography>\r\n                <div>\r\n                    <Table hover size=\"sm\" className=\"table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Title</th>\r\n                            <th>Author</th>\r\n                            <th>Year</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {references &&\r\n                        references.map((ref) => (\r\n                            <TableRow key={ref}\r\n                            draggable={true}\r\n                            onDragStart={e => {\r\n                                draggedRow.current = ref\r\n                            }}>\r\n                                <td>{ref.title}</td>\r\n                                <td>{ref.author}</td>\r\n                                <td>{ref.year}</td>\r\n                            </TableRow>\r\n                        ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ReferencesTable)\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\n//import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport MindMap\r\n    from \"./MindMap\";\r\nimport KonvaReferencesTable\r\n    from \"./KonvaReferencesTable\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n    Layer,\r\n    Stage\r\n} from 'react-konva';\r\nimport useWindowDimensions\r\n    from './WindowDimensions';\r\nimport ToolBar\r\n    from \"./ToolBar\";\r\nimport NodeInfoPanel\r\n    from \"./NodeInfoPanel\";\r\n\r\nimport ReferencesTable\r\n    from \"./ReferencesTable\";\r\n\r\nfunction App() {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    const [edges, setEdges] = useState([]);\r\n\r\n    const [references, setReferences] = useState([{}]);\r\n\r\n    const [selectedNode, setSelectedNode] = useState({});\r\n\r\n    const [globalNodeIdCounter, setGlobalNodeIdCounter] = useState(4);\r\n\r\n    const [linking, setLinking] = useState(false);\r\n\r\n    const getNodeById = (id) => {\r\n        return nodes.find(node => (node.id === id));\r\n    };\r\n\r\n    const handleSelected = (selected) => {\r\n        if(!linking){\r\n            setSelectedNode(selected);\r\n        } else {\r\n            // TODO make edge between clicked node and selected\r\n            addEdge(selectedNode, selected);\r\n            setLinking(false);\r\n            setSelectedNode(selected);\r\n        }\r\n    }\r\n\r\n    const getReferenceById = (id) => {\r\n        for (const reference of references) {\r\n            if (reference.citekey === id) {\r\n                return reference;\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateNode = (newNode) => {\r\n        const newNodes = nodes.map((node) => {\r\n        if (newNode.id === node.id) {\r\n            return newNode;\r\n        } else {\r\n            return node;\r\n        }\r\n        });\r\n        setNodes(newNodes);\r\n    };\r\n\r\n    const updateNodeColor = (nodeId, newColor) => {\r\n\r\n        const newNodes = nodes.map((node) => {\r\n            if (node.id === nodeId) {\r\n                return {\r\n                    ...node,\r\n                    colour: newColor\r\n                };\r\n            }\r\n            return node;\r\n        });\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const updateSearchIndex = (idx) => {\r\n        // update the nodes in search, show red stroke\r\n        nodes.forEach(node => {\r\n            if(idx.indexOf(node.id) >-1){\r\n                node.isInSearch = true;\r\n            }\r\n            else\r\n            {\r\n                node.isInSearch = false;\r\n            }\r\n            updateNode(node)\r\n        });\r\n\r\n    }\r\n    const updateEdges = (id, x, y) => {\r\n        const newEdges = edges.map((edge) => {\r\n            if (edge.startId === id) {\r\n                return {\r\n                    ...edge,\r\n                    startX: x,\r\n                    startY: y,\r\n                };\r\n            }\r\n            if (edge.endId === id) {\r\n                return {\r\n                    ...edge,\r\n                    endX: x,\r\n                    endY: y,\r\n                };\r\n            }\r\n            return edge;\r\n        });\r\n        setEdges(newEdges);\r\n    };\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        wrapper: {\r\n            position: \"relative\",\r\n        },\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const fetchMap = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/map\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                //setNodes(data.nodes);\r\n                setNodes(data.nodes.map(node => {\r\n                   if(node.id === -1) {\r\n                       return {\r\n                           ...node,\r\n                           x_pos: windowWidth/8,\r\n                           y_pos: windowHeight/3\r\n                       }\r\n                   } else {\r\n                       return node;\r\n                   }\r\n                }));\r\n                setEdges(\r\n                data.edges.map(edge => {\r\n                    let node1 = data.nodes.find(node => node.id === edge.node1_Id);\r\n                    let node2 = data.nodes.find(node => node.id === edge.node2_Id);\r\n                    return {\r\n                        startId: edge.node1_Id,\r\n                        startX: node1.x_pos,\r\n                        startY: node1.y_pos,\r\n                        endId: edge.node2_Id,\r\n                        endX: node2.x_pos,\r\n                        endY: node2.y_pos,\r\n                    };\r\n                }));\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    const searchNodes = (event) =>{\r\n        // TODO: currently search node from id, should add label search, icon search\r\n        var searchterm = event.target.value;\r\n        var indx = [];\r\n\r\n        if(searchterm === ''){\r\n            updateSearchIndex(indx)\r\n            return;\r\n        }\r\n\r\n        nodes.forEach((node) => {\r\n            if(node.label.indexOf(searchterm)>-1) {\r\n                indx.push(node.id);\r\n            }\r\n        });\r\n\r\n        updateSearchIndex(indx)\r\n    }\r\n\r\n    const changeNodeColor = (color, event) =>{\r\n        updateNodeColor(selectedNode.id, color.hex);\r\n    }\r\n\r\n    const fetchReferences = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/entries\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setReferences(data);\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchReferences();\r\n        fetchMap();\r\n        console.log(selectedNode)\r\n    }, []);\r\n\r\n    const saveMap = () => {\r\n        const convertedEdges = edges.map(edge => {\r\n            return {\r\n                node1_Id: edge.startId,\r\n                node2_Id: edge.endId\r\n            }\r\n        });\r\n        const payload = JSON.stringify({\r\n            \"nodes\": nodes,\r\n            \"edges\": convertedEdges\r\n        });\r\n        fetch('http://localhost:9898/libraries/current/map', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: payload\r\n        });\r\n    }\r\n\r\n    const addNode = (bibData, x_pos, y_pos) => {\r\n        if (selectedNode.id !== undefined) {\r\n            console.log(selectedNode)\r\n            let nodeLabel;\r\n            let bibEntryId;\r\n            if (bibData === undefined) {\r\n                nodeLabel = `New Node`\r\n            } else {\r\n                bibEntryId = bibData.citekey;\r\n                nodeLabel = bibData.title;\r\n            }\r\n            if (x_pos === undefined) {\r\n                x_pos = 0;\r\n            }\r\n            if (y_pos === undefined) {\r\n                y_pos = 400;\r\n            }\r\n            const newNode = {\r\n                id: Math.floor(Math.random() * 1000000000),\r\n                label: nodeLabel,\r\n                x_pos: x_pos,\r\n                y_pos: y_pos,\r\n                citationKey: bibEntryId\r\n            }\r\n\r\n        setNodes([...nodes, newNode]);\r\n        addEdge(selectedNode, newNode);\r\n        handleSelected(newNode);\r\n    }\r\n  }\r\n\r\n  const addEdge = (node1, node2) => {\r\n    if(node1.id !== node2.id) {\r\n        const newEdge = {\r\n            startId: node1.id,\r\n            startX: node1.x_pos,\r\n            startY: node1.y_pos,\r\n            endId: node2.id,\r\n            endX: node2.x_pos,\r\n            endY: node2.y_pos\r\n        }\r\n        setEdges([...edges,newEdge])\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n    const deleteNode = () => {\r\n        if (selectedNode.id !== undefined) {\r\n            setNodes(nodes.filter((node) => {return node.id !== selectedNode.id}));\r\n            setEdges(edges.filter((edge) => { return edge.startId !== selectedNode.id && edge.endId !== selectedNode.id }));\r\n        }\r\n    }\r\n\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n    const draggedRow = useRef();\r\n\r\n    return (\r\n        <div\r\n            className={classes.wrapper}>\r\n\r\n            {/* <ToolBar\r\n        nodes={nodes}\r\n        edges={edges}\r\n        getNodeById={getNodeById}\r\n        selectedNodeId={selectedNodeId}\r\n        setNodes={setNodes}\r\n        setEdges={setEdges}\r\n        globalNodeIdCounter={globalNodeIdCounter}\r\n        setGlobalNodeIdCounter={setGlobalNodeIdCounter}\r\n      /> */}\r\n            <ToolBar\r\n              addNode={addNode}\r\n              saveMap={saveMap}\r\n              deleteNode={deleteNode}\r\n              searchNodes = {searchNodes}\r\n              linking={linking}\r\n              setLinking={setLinking}\r\n            />\r\n            <ReferencesTable\r\n                draggedRow={draggedRow}\r\n                addNode={addNode}\r\n                references={references}\r\n                setReferences={setReferences}\r\n            />\r\n            <div\r\n                onDrop={e => {\r\n                    // register event position\r\n                    stageRef.current.setPointersPositions(e);\r\n                    const {x, y} = stageRef.current.getPointerPosition();\r\n                    addNode(draggedRow.current, x - windowHeight * 0.25 - 75, y);\r\n                }}\r\n                onDragOver={e => e.preventDefault()}\r\n            >\r\n                <Stage\r\n                    style={{left: \"25%\", position: \"absolute\", top: \"64px\", margin: 0, padding: 0}}\r\n                    width={windowWidth * 0.75}\r\n                    height={windowHeight - 64}\r\n                    ref={stageRef}>\r\n                    <Layer\r\n                        ref={layerRef}>\r\n                        <MindMap\r\n                            nodes={nodes}\r\n                            edges={edges}\r\n                            updateEdges={updateEdges}\r\n                            updateNode={updateNode}\r\n                            selectedNodeId={selectedNode.id}\r\n                            setSelectedNode={handleSelected}\r\n                            updateSearchIndex = {updateSearchIndex}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            {selectedNode.id ? <NodeInfoPanel node={selectedNode} reference={getReferenceById(selectedNode.citationKey)} updateNode={updateNode} changeNodeColor={changeNodeColor}/> :\r\n                <NodeInfoPanel node={selectedNode} updateNode={updateNode} />}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}