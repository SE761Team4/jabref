{"version":3,"sources":["enums/IconTypes.js","components/NodeIcons.js","utils/utilFunctions.js","components/Node.js","components/Edge.js","components/MindMap.js","WindowDimensions.js","enums/Priorities.js","components/PriorityDropdown.js","components/ToolBar.js","components/NodeInfoPanel.js","components/ReferencesTable.js","App.js","serviceWorker.js","index.js"],"names":["IconTypes","NodeIcons","node","updateNode","useImage","readIcon","toReadIcon","highPriorityIcon","medPriorityIcon","lowPriorityIcon","favouritedIcon","notFavouriteIcon","width","height","offsetX","NODE_WIDTH","offsetY","image","icons","includes","onClick","newIcons","filter","icon","push","renderText","text","length","substring","MAX_LENGTH","Node","updateEdges","setSelectedNode","selectedNodeId","isInSearch","label","bibEntryId","id","x","x_pos","y","y_pos","draggable","onDragMove","e","target","onMouseEnter","getStage","container","style","cursor","onMouseLeave","radius","NODE_HEIGHT","cornerRadius","fill","strokeWidth","undefined","colour","stroke","align","verticalAlign","Edge","x1","y1","x2","y2","pts","st","ct","en","lineCap","sceneFunc","context","shape","beginPath","moveTo","bezierCurveTo","strokeShape","MindMap","nodes","edges","map","edge","key","startID","startX","startY","endX","endY","getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","Priorities","React","memo","selectedNode","anchorEl","setAnchorEl","handleClose","pickPriority","event","textContent","className","Button","currentTarget","src","Menu","keepMounted","open","Boolean","onClose","MenuItem","alt","ListItemText","primary","addNode","saveMap","deleteNode","searchNodes","linking","setLinking","unlinking","setUnlinking","inputRef","useRef","onkeydown","keyCode","ctrlKey","preventDefault","current","focus","Toolbar","component","Paper","size","aria-label","color","paddingLeft","onChange","ref","placeholder","NodeInfoPanel","reference","changeNodeColor","classes","makeStyles","panel","position","top","right","backgroundColor","border","padding","useStyles","labelInputRef","inputValue","setInputValue","Card","Typography","gutterBottom","variant","textAlign","TextField","marginBottom","marginLeft","InputLabelProps","shrink","value","type","TableRow","TableCell","scope","colors","Table","table","margin","TableBody","title","author","year","references","draggedRow","hover","onDragStart","App","setNodes","setEdges","setReferences","fetchReferences","fetchMap","a","fetch","then","res","json","data","node1","find","node1_Id","node2","node2_Id","startId","endId","catch","console","log","handleSelected","selected","removeEdge","addEdge","startNode","endNode","filteredEdges","newNode","newNodes","updateSearchIndex","idx","forEach","indexOf","bibData","nodeLabel","citekey","Math","floor","random","citationKey","newEdge","layerRef","stageRef","ToolBar","convertedEdges","payload","JSON","stringify","method","headers","body","searchTerm","searchResult","onDrop","setPointersPositions","getPointerPosition","onDragOver","left","newEdges","getReferenceById","nodeId","newColor","updateNodeColor","hex","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0be22296.chunk.js","sourcesContent":["export const IconTypes = {\r\n    READ : \"READ\",\r\n    TO_READ : \"TO_READ\",\r\n    HIGH_PRIORITY : \"HIGH_PRIORITY\",\r\n    MEDIUM_PRIORITY : \"MEDIUM_PRIORITY\",\r\n    LOW_PRIORITY : \"LOW_PRIORITY\",\r\n    FAVOURITE : \"FAVOURITE\",\r\n    NOT_FAVOURITE : \"NOT_FAVOURITE\"\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport useImage from 'use-image';\r\nimport { Image, Group } from 'react-konva';\r\nimport { IconTypes } from '../enums/IconTypes';\r\n\r\nconst NodeIcons = ({node, updateNode}) => {\r\n\r\n    // Read in images for node icons\r\n    const [readIcon] = useImage('./assets/Read.png');\r\n    const [toReadIcon] = useImage('./assets/ToRead.png');\r\n    const [highPriorityIcon] = useImage('./assets/HighPriority.png');\r\n    const [medPriorityIcon] = useImage('./assets/MediumPriority.png');\r\n    const [lowPriorityIcon] = useImage('./assets/LowPriority.png');\r\n    const [favouritedIcon] = useImage('./assets/Favourited.png');\r\n    const [notFavouriteIcon] = useImage('./assets/NotFavourited.png');\r\n\r\n    const NODE_WIDTH = 170;\r\n    const NODE_HEIGHT = 80;\r\n\r\n    const toggleFavouritedIcon = () => {\r\n\r\n        if(node.icons){\r\n          let newIcons = [];\r\n          if(node.icons.includes(IconTypes.FAVOURITE)){\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n            newIcons.push(IconTypes.NOT_FAVOURITE);\r\n          } else {\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n            newIcons.push(IconTypes.FAVOURITE)\r\n          }\r\n          node.icons = newIcons;\r\n          updateNode(node);\r\n        }\r\n      }\r\n\r\n      const toggleReadIcon = () => {\r\n\r\n        if(node.icons){\r\n          let newIcons = [];\r\n          if(node.icons.includes(IconTypes.READ)){\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n            newIcons.push(IconTypes.TO_READ);\r\n          } else {\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n            newIcons.push(IconTypes.READ)\r\n          }\r\n          node.icons = newIcons;\r\n          updateNode(node);\r\n        }\r\n      }\r\n\r\n    return (\r\n        <Group\r\n        width={NODE_WIDTH}\r\n        height={NODE_HEIGHT}\r\n        offsetX={NODE_WIDTH/2 -10}\r\n        offsetY={-NODE_HEIGHT/2 + 20}>\r\n\r\n        <Image image={node.icons.includes(IconTypes.READ) ? readIcon : toReadIcon} width={24} height={24} offsetX={-30} offsetY={10} onClick={toggleReadIcon}/>\r\n\r\n        { node.icons.includes(IconTypes.HIGH_PRIORITY) &&\r\n        <Image image={highPriorityIcon} width={24} height={24} offsetX={0} offsetY={10}/>}\r\n\r\n        {node.icons.includes(IconTypes.MEDIUM_PRIORITY) &&\r\n            <Image image={medPriorityIcon} width={24} height={24} offsetX={0} offsetY={10}/>}\r\n\r\n        {node.icons.includes(IconTypes.LOW_PRIORITY) &&\r\n            <Image image={lowPriorityIcon} width={24} height={24} offsetX={0} offsetY={10}/>}\r\n\r\n        <Image image={node.icons.includes(IconTypes.FAVOURITE) ? favouritedIcon : notFavouriteIcon} width={24} height={24} offsetX={-60} offsetY={10} onClick={toggleFavouritedIcon}/>\r\n    </Group>\r\n    );\r\n}\r\n\r\nexport default NodeIcons;\r\n","const MAX_LENGTH = 60;\r\n\r\n// function for limiting text length in table and nodes\r\nexport function renderText(text) {\r\n    if(text){\r\n        if(text.length > MAX_LENGTH) {\r\n            return `${text.substring(0, MAX_LENGTH - 3)}...`\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport { Text, Group, Rect } from 'react-konva';\r\nimport NodeIcons from './NodeIcons';\r\nimport { renderText } from '../utils/utilFunctions';\r\n\r\nconst Node = ({node, updateEdges, setSelectedNode, selectedNodeId, updateNode, label, bibEntryId, isInSearch: isInSearch}) => {\r\n\r\n  const NODE_WIDTH = 170;\r\n  const NODE_HEIGHT = 80;\r\n\r\n  const handleDragMove = (e) => {\r\n        node.x_pos = e.target.x()\r\n        node.y_pos = e.target.y()\r\n      updateNode(node);\r\n      updateEdges(node.id, e.target.x(), e.target.y());\r\n    }\r\n\r\n    return (\r\n      <Group\r\n        id={node.id}\r\n        x={node.x_pos}\r\n        y={node.y_pos}\r\n        draggable\r\n        onDragMove={handleDragMove}\r\n        onClick={() => setSelectedNode(node)}\r\n        onMouseEnter={(e) => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"pointer\";\r\n        }}\r\n        onMouseLeave={e => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"default\";\r\n        }}\r\n      >\r\n        <Rect\r\n          // Codes of this rect is to cover the edge under rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={NODE_WIDTH}\r\n          height={NODE_HEIGHT}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2}\r\n          cornerRadius={20}\r\n          fill={\"white\"}\r\n          strokeWidth={4}\r\n        />\r\n\r\n        <Rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={NODE_WIDTH}\r\n          height={NODE_HEIGHT}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2}\r\n          cornerRadius={20}\r\n          fill={isInSearch ? \"#3f51b5\" : (selectedNodeId === node.id ? \"#a2b8e5\" : node.colour==undefined?\"white\":node.colour+\"80\")}\r\n          stroke={node.colour === undefined ? \"#6E6E6E\" : node.colour}\r\n          strokeWidth={4}\r\n        />\r\n        <Text text={renderText(node.label)}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2 + 10}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={NODE_WIDTH}\r\n        height={NODE_HEIGHT}\r\n        />\r\n        <NodeIcons node={node} updateNode={updateNode}></NodeIcons>\r\n      </Group>\r\n    );\r\n  };\r\n  export default Node;\r\n","import React\r\n    from 'react';\r\nimport {Shape} from 'react-konva';\r\n\r\n\r\nconst Edge = ({x1, y1, x2, y2}) => {\r\n    let pts = { st: [x1, y1],\r\n        ct: [x1, y2, x1, y2],\r\n        en: [x2, y2]\r\n    }\r\n\r\n    return (\r\n        <Shape stroke={\"#50618F\"}\r\n                strokeWidth={6}\r\n                lineCap={\"round\"}\r\n                sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(...pts.st);\r\n                    context.bezierCurveTo(...pts.ct,...pts.en);\r\n                    context.strokeShape(shape);\r\n                }}>\r\n        </Shape>\r\n    )\r\n}\r\n\r\nexport default Edge;\r\n","import React\r\n    from \"react\";\r\nimport \"../App.css\";\r\nimport Node\r\n    from \"./Node\";\r\nimport Edge\r\n    from \"./Edge\";\r\nimport {Group} from 'react-konva';\r\n\r\nconst MindMap = ({nodes, edges, updateEdges, setSelectedNode, selectedNodeId, updateNode}) => {\r\n    return (\r\n        <Group x={310}>\r\n            {edges.map((edge) =>\r\n                <Edge key={edge.startID} x1={edge.startX} y1={edge.startY} x2={edge.endX} y2={edge.endY}/>\r\n            )}\r\n            {nodes.map((node) =>\r\n                <Node node={node} key={node.id} label={node.label} x={node.x_pos} y={node.y_pos} colour={node.colour} updateEdges={updateEdges} selectedNodeId={selectedNodeId} setSelectedNode={setSelectedNode} updateNode={updateNode} isInSearch = {node.isInSearch}/>\r\n            )}\r\n        </ Group>\r\n    )\r\n}\r\n\r\nexport default MindMap;\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\r\n    return {\r\n        windowWidth,\r\n        windowHeight\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","export const Priorities = {\r\n    HIGH : \"High priority\",\r\n    MEDIUM : \"Medium priority\",\r\n    LOW : \"Low priority\"\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport \"../styling/PriorityDropdown.css\";\r\nimport { Priorities } from \"../enums/Priorities\";\r\nimport { IconTypes } from \"../enums/IconTypes\";\r\n\r\nconst PriorityDropdown = ({selectedNode, updateNode}) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  // Handle closing the priorities dropdown menu\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const pickPriority = (event) => {\r\n      // If a node is selected, set the priority to the one chosen in the menu\r\n      if (selectedNode.icons)\r\n      {\r\n        if (event.target.textContent === Priorities.HIGH)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.MEDIUM_PRIORITY && icon !== IconTypes.LOW_PRIORITY});\r\n          newIcons.push(IconTypes.HIGH_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n        else if (event.target.textContent === Priorities.MEDIUM)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.HIGH_PRIORITY && icon !== IconTypes.LOW_PRIORITY});\r\n          newIcons.push(IconTypes.MEDIUM_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n      }\r\n        else if (event.target.textContent === Priorities.LOW)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.MEDIUM_PRIORITY && icon !== IconTypes.HIGH_PRIORITY});\r\n          newIcons.push(IconTypes.LOW_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n      handleClose();\r\n  }\r\n\r\n  return (\r\n    <div className=\"priority-menu\">\r\n      <Button\r\n        onClick={handleClick}\r\n      >\r\n        <img src={\"./assets/LowPriority.png\"} className=\"main-button-icon\"/>\r\n\r\n      </Button>\r\n      <Menu\r\n        id=\"customized-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n          <MenuItem onClick={pickPriority}>\r\n              <img src={\"./assets/LowPriority.png\"} alt=\"low-priority\" className=\"menu-buttons\" id=\"low-priority\"/>\r\n              <ListItemText primary={Priorities.LOW} />\r\n          </MenuItem>\r\n          <MenuItem onClick={pickPriority}>\r\n              <img src={\"./assets/MediumPriority.png\"} alt=\"medium-priority\" className=\"menu-buttons\" id=\"medium-priority\"/>\r\n              <ListItemText primary={Priorities.MEDIUM} />\r\n          </MenuItem>\r\n          <MenuItem onClick={pickPriority}>\r\n              <img src={\"./assets/HighPriority.png\"} alt=\"high-priority\" className=\"menu-buttons\" id=\"high-priority\"/>\r\n              <ListItemText primary={Priorities.HIGH} />\r\n          </MenuItem>\r\n    </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(PriorityDropdown)\r\n","import React, {useRef} from \"react\";\r\nimport Toolbar\r\n    from '@material-ui/core/Toolbar';\r\nimport '../styling/Toolbar.css';\r\nimport Paper\r\n    from '@material-ui/core/Paper';\r\nimport {Button} from '@material-ui/core';\r\nimport {IconTypes} from \"../enums/IconTypes\";\r\nimport PriorityDropdown\r\n    from \"./PriorityDropdown\";\r\n\r\nconst MindMapToolbar = ({ selectedNode, updateNode, addNode, saveMap, deleteNode, searchNodes, linking, setLinking, unlinking, setUnlinking}) => {\r\n\r\n    const inputRef = useRef(null);\r\n\r\n\r\n     window.onkeydown = function(e)  {\r\n        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)){\r\n            // listen to ctrl + F\r\n            e.preventDefault();\r\n            inputRef.current.focus();\r\n        }\r\n    }\r\n\r\n    const toggleReadIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.READ)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n            newIcons.push(IconTypes.TO_READ);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n            newIcons.push(IconTypes.READ)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n      const toggleFavouritedIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.FAVOURITE)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n            newIcons.push(IconTypes.NOT_FAVOURITE);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n            newIcons.push(IconTypes.FAVOURITE)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n\r\n    return(\r\n        <Toolbar className = 'toolbar-proportions' component = { Paper }>\r\n        <div className=\"buttons-container\">\r\n\r\n            <Button size=\"small\" aria-label = \"add\" onClick={() => addNode()} >\r\n                <img src={\"./assets/Add.png\"} alt=\"Add\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <Button size=\"small\" onClick={() => setLinking(!linking)} color={linking ? 'primary' : 'default'} >\r\n                <img src={\"./assets/Link.png\"} alt=\"Link\" className=\"toolbar-button \"/>\r\n            </Button>\r\n\r\n            <Button size=\"small\" onClick={() => setUnlinking(!unlinking)} color={linking ? 'primary' : 'default'} >\r\n                <img src={\"./assets/Unlink.png\"} alt=\"Unlink\" className=\"toolbar-button \"/>\r\n            </Button>\r\n            <div className=\"divider\"/>\r\n\r\n            <PriorityDropdown selectedNode={selectedNode} updateNode={updateNode}/>\r\n\r\n            <Button size=\"small\" onClick={toggleReadIcon}>\r\n                <img src={\"./assets/MarkRead.png\"} alt=\"Read Status\" className=\"toolbar-button\"/>\r\n            </Button>\r\n\r\n            <Button size=\"small\" onClick={toggleFavouritedIcon}>\r\n                <img src={\"./assets/Favourite.png\"} alt=\"Favourite\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <div className=\"divider\"/>\r\n\r\n            <Button size=\"small\" onClick={deleteNode}>\r\n                <img src={\"./assets/Trash.png\"} alt=\"Delete Node\" className=\"trash-button\"/>\r\n            </Button>\r\n        </div>\r\n\r\n        <div className=\"search-container\">\r\n\r\n            <Button size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <img src={\"./assets/Save.png\"} alt=\"Priority\" className=\"toolbar-button save-button\"/>\r\n            </Button>\r\n\r\n            <input className=\"search-bar\" id=\"outlined-basic\" onChange={searchNodes}  ref={inputRef } placeholder=\"Search...\" />\r\n        </div>\r\n\r\n    </Toolbar>\r\n    )\r\n}\r\n\r\nexport default React.memo(MindMapToolbar);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport {CirclePicker} from 'react-color';\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport TextField\r\n    from \"@material-ui/core/TextField\";\r\n\r\nconst NodeInfoPanel = ({node, reference, updateNode, changeNodeColor}) => {\r\n    const useStyles = makeStyles({\r\n       panel: {\r\n            position: \"absolute\",\r\n           top: '10%',\r\n           right: '1%',\r\n           width: \"300px\",\r\n           backgroundColor: \"white\",\r\n\r\n           '& td': {\r\n               border: \"none\",\r\n               padding: \"10px\"\r\n           },\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const labelInputRef = useRef();\r\n\r\n    const [inputValue, setInputValue] = useState();\r\n    useEffect(() => {\r\n        setInputValue(node.label)\r\n        labelInputRef.current.focus();\r\n    }, [node]);\r\n\r\n    const updateValue = (e) => {\r\n        setInputValue(e.target.value);\r\n        node.label = e.target.value;\r\n        updateNode(node);\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.panel}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                Node Info\r\n            </Typography>\r\n            <TextField style={{ width:\"calc(100% - 20px)\", marginBottom:\"10px\", marginLeft:\"10px\"}}  InputLabelProps={{shrink: true,}} id=\"standard-basic\" label=\"Label\" value={inputValue} type=\"text\" inputRef={labelInputRef} onChange={updateValue}/>\r\n            <TableRow key=\"colorEditor\">\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\", color: \"#3f51b5\"}}>\r\n                        Color:\r\n                    </TableCell>\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\"}}>\r\n                    {/*<input id='nodeColor' type=\"color\" value={ node.colour === undefined? 'black': node.colour} onChange = {changeNodeColor}></input>*/}\r\n                    <CirclePicker colors={['#BA1D2A', '#FC6A38', '#55773B', '#279DA3', '#0E5756']} onChange={changeNodeColor}/>\r\n                    </TableCell>\r\n                </TableRow>\r\n\r\n            {reference &&\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <Typography gutterBottom style={{paddingLeft: \"10px\", margin: 0}} variant=\"h5\" component=\"h5\" >\r\n                    BibEntry\r\n                </Typography>\r\n                <TableBody>\r\n                     <TableRow key={reference.title}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Title:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.title}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.author}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Author:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.author}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.year}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Year:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.year}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NodeInfoPanel;\r\n","import React\r\n    from \"react\";\r\nimport {\r\n    Table,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport \"../styling/ReferencesTable.css\";\r\nimport useWindowDimensions\r\n    from \"../WindowDimensions\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\n\r\nconst ReferencesTable = ({references, draggedRow}) => {\r\n\r\n    const {windowHeight, } = useWindowDimensions();\r\n    return (\r\n        <div className=\"table-proportions\"style={{height:windowHeight, backgroundColor: \"#f9f9f9\"}}>\r\n            <Card style={{width: \"99.5%\"}}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                    References\r\n                </Typography>\r\n                <div>\r\n                    <Table hover size=\"sm\" className=\"table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Title</th>\r\n                            <th>Author</th>\r\n                            <th>Year</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {references &&\r\n                        references.map((ref) => (\r\n                            <TableRow key={ref}\r\n                                      draggable={true}\r\n                                      onDragStart={e => {\r\n                                          draggedRow.current = ref\r\n                                      }}>\r\n                                <td className=\"displayedText\">{ref.title}</td>\r\n                                <td className=\"displayedText\">{ref.author}</td>\r\n                                <td className=\"displayedText\">{ref.year}</td>\r\n                            </TableRow>\r\n                        ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ReferencesTable)\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport \"./App.css\";\r\nimport MindMap\r\n    from \"./components/MindMap\";\r\nimport {\r\n    Layer,\r\n    Stage\r\n} from 'react-konva';\r\nimport useWindowDimensions\r\n    from './WindowDimensions';\r\nimport ToolBar\r\n    from \"./components/ToolBar\";\r\nimport NodeInfoPanel\r\n    from \"./components/NodeInfoPanel\";\r\nimport ReferencesTable\r\n    from \"./components/ReferencesTable\";\r\nimport {IconTypes} from \"./enums/IconTypes\";\r\n\r\nfunction App() {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    const [edges, setEdges] = useState([]);\r\n\r\n    const [references, setReferences] = useState([{}]);\r\n\r\n    const [selectedNode, setSelectedNode] = useState({});\r\n\r\n    const [linking, setLinking] = useState(false);\r\n\r\n    const [unlinking, setUnlinking] = useState(false);\r\n\r\n    /**\r\n     * Fetch data on component mount\r\n     */\r\n    useEffect(() => {\r\n        fetchReferences();\r\n        fetchMap();\r\n    }, []);\r\n\r\n    /**\r\n     * Get mind map nodes and edges from Jabref to load a saved map.\r\n     */\r\n    const fetchMap = async () => {\r\n        fetch(\"/libraries/current/map\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setNodes(data.nodes.map(node => {\r\n                    if (node.id === -1) {\r\n                        return {\r\n                            ...node,\r\n                            x_pos: windowWidth / 8,\r\n                            y_pos: windowHeight / 3\r\n                        }\r\n                    } else {\r\n                        return node;\r\n                    }\r\n                }));\r\n                setEdges(\r\n                    data.edges.map(edge => {\r\n                        let node1 = data.nodes.find(node => node.id === edge.node1_Id);\r\n                        let node2 = data.nodes.find(node => node.id === edge.node2_Id);\r\n                        return {\r\n                            startId: edge.node1_Id,\r\n                            startX: node1.x_pos,\r\n                            startY: node1.y_pos,\r\n                            endId: edge.node2_Id,\r\n                            endX: node2.x_pos,\r\n                            endY: node2.y_pos,\r\n                        };\r\n                    }));\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    /**\r\n     * Get references from Jabref to be displayed in the sidebar.\r\n     */\r\n    const fetchReferences = async () => {\r\n        fetch(\"/libraries/current/entries\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setReferences(data);\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Save mind map nodes and edges to Jabref.\r\n     */\r\n    const saveMap = () => {\r\n        const convertedEdges = edges.map(edge => {\r\n            return {\r\n                node1_Id: edge.startId,\r\n                node2_Id: edge.endId\r\n            }\r\n        });\r\n        const payload = JSON.stringify({\r\n            \"nodes\": nodes,\r\n            \"edges\": convertedEdges\r\n        });\r\n        fetch('/libraries/current/map', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: payload\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Link or unlink from the selected node.\r\n     */\r\n    const handleSelected = (selected) => {\r\n        if (!linking && !unlinking) {\r\n            setSelectedNode(selected);\r\n        } else if (unlinking) {\r\n            removeEdge(selectedNode, selected);\r\n            setUnlinking(false);\r\n        } else if (linking) {\r\n            addEdge(selectedNode, selected);\r\n            setLinking(false);\r\n            setSelectedNode(selected);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an edge between two nodes\r\n     */\r\n    const removeEdge = (startNode, endNode) => {\r\n        let filteredEdges = edges.filter((edge) => {\r\n            return (edge.startId === startNode.id && edge.endId === endNode.id) || (edge.startId === endNode.id && edge.endId === startNode.id)\r\n        });\r\n        setEdges(edges.filter((edge) => {\r\n            return !filteredEdges.includes(edge)\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Update a node with same id as the new node passed in.\r\n     */\r\n    const updateNode = (newNode) => {\r\n        const newNodes = nodes.map((node) => {\r\n            if (newNode.id === node.id) {\r\n                return newNode;\r\n            } else {\r\n                return node;\r\n            }\r\n        });\r\n        setNodes(newNodes);\r\n    };\r\n\r\n    /**\r\n     * Update the colour of the node with nodeId.\r\n     */\r\n    const updateNodeColor = (nodeId, newColor) => {\r\n        const newNodes = nodes.map((node) => {\r\n            if (node.id === nodeId) {\r\n                return {\r\n                    ...node,\r\n                    colour: newColor\r\n                };\r\n            }\r\n            return node;\r\n        });\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    /**\r\n     * Mark nodes in search\r\n     */\r\n    const updateSearchIndex = (idx) => {\r\n        nodes.forEach(node => {\r\n            if (idx.indexOf(node.id) > -1) {\r\n                node.isInSearch = true;\r\n            } else {\r\n                node.isInSearch = false;\r\n            }\r\n            updateNode(node)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update edges when attached nodes are moved.\r\n     */\r\n    const updateEdges = (id, x, y) => {\r\n        const newEdges = edges.map((edge) => {\r\n            if (edge.startId === id) {\r\n                return {\r\n                    ...edge,\r\n                    startX: x,\r\n                    startY: y,\r\n                };\r\n            }\r\n            if (edge.endId === id) {\r\n                return {\r\n                    ...edge,\r\n                    endX: x,\r\n                    endY: y,\r\n                };\r\n            }\r\n            return edge;\r\n        });\r\n        setEdges(newEdges);\r\n    };\r\n\r\n    /**\r\n     * Add nodes in search to search result\r\n     */\r\n    const searchNodes = (event) => {\r\n        const searchTerm = event.target.value;\r\n        const searchResult = [];\r\n        if (searchTerm === '') {\r\n            updateSearchIndex(searchResult)\r\n            return;\r\n        }\r\n        nodes.forEach((node) => {\r\n            if (node.label.indexOf(searchTerm) > -1) {\r\n                searchResult.push(node.id);\r\n            }\r\n        });\r\n        updateSearchIndex(searchResult)\r\n    }\r\n\r\n    /**\r\n     * Change the colour of the selected node.\r\n     */\r\n    const changeNodeColor = (color) => {\r\n        updateNodeColor(selectedNode.id, color.hex);\r\n    }\r\n\r\n    /**\r\n     * Add a node with an edge connected to the selected node.\r\n     */\r\n    const addNode = (bibData, x_pos, y_pos) => {\r\n        if (selectedNode.id !== undefined) {\r\n            let nodeLabel;\r\n            let bibEntryId;\r\n            if (bibData === undefined) {\r\n                nodeLabel = `New Node`\r\n            } else {\r\n                bibEntryId = bibData.citekey;\r\n                nodeLabel = bibData.title;\r\n            }\r\n            if (x_pos === undefined) {\r\n                x_pos = 0;\r\n            }\r\n            if (y_pos === undefined) {\r\n                y_pos = 400;\r\n            }\r\n            const newNode = {\r\n                id: Math.floor(Math.random() * 1000000000),\r\n                label: nodeLabel,\r\n                x_pos: x_pos,\r\n                y_pos: y_pos,\r\n                citationKey: bibEntryId,\r\n                icons: [IconTypes.TO_READ, IconTypes.LOW_PRIORITY, IconTypes.NOT_FAVOURITE]\r\n            }\r\n\r\n            setNodes([...nodes, newNode]);\r\n            addEdge(selectedNode, newNode);\r\n            handleSelected(newNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an edges between two nodes. Stores the id of each node so it updates when nodes move.\r\n     */\r\n    const addEdge = (node1, node2) => {\r\n        if (node1.id !== node2.id) {\r\n            const newEdge = {\r\n                startId: node1.id,\r\n                startX: node1.x_pos,\r\n                startY: node1.y_pos,\r\n                endId: node2.id,\r\n                endX: node2.x_pos,\r\n                endY: node2.y_pos\r\n            }\r\n            setEdges([...edges, newEdge])\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete the selected node and all attached edges.\r\n     */\r\n    const deleteNode = () => {\r\n        if (selectedNode.id !== undefined && selectedNode.id !== -1) {\r\n            setNodes(nodes.filter((node) => {\r\n                return node.id !== selectedNode.id\r\n            }));\r\n            setEdges(edges.filter((edge) => {\r\n                return edge.startId !== selectedNode.id && edge.endId !== selectedNode.id\r\n            }));\r\n            setSelectedNode(nodes[0]);\r\n        }\r\n    }\r\n\r\n    const getReferenceById = (id) => {\r\n        for (const reference of references) {\r\n            if (reference.citekey === id) {\r\n                return reference;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Refs to access properties of Konva Elements\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n    const draggedRow = useRef();\r\n\r\n    //Window dimensions to set canvas width and height\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n    return (\r\n        <div\r\n            className=\"container\">\r\n            <ReferencesTable\r\n                draggedRow={draggedRow}\r\n                addNode={addNode}\r\n                references={references}\r\n                setReferences={setReferences}\r\n                className=\"references\"\r\n            />\r\n            <div\r\n                className=\"map-container\">\r\n                <ToolBar\r\n                    selectedNode={selectedNode}\r\n                    updateNode={updateNode}\r\n                    addNode={addNode}\r\n                    saveMap={saveMap}\r\n                    deleteNode={deleteNode}\r\n                    searchNodes={searchNodes}\r\n                    linking={linking}\r\n                    setLinking={setLinking}\r\n                    unlinking={unlinking}\r\n                    setUnlinking={setUnlinking}\r\n                />\r\n                <div\r\n                    onDrop={e => {\r\n                        stageRef.current.setPointersPositions(e);\r\n                        const {x, y} = stageRef.current.getPointerPosition();\r\n                        addNode(draggedRow.current, x - windowHeight * 0.25 - 75, y);\r\n                    }}\r\n                    onDragOver={e => e.preventDefault()}\r\n                >\r\n                    <Stage\r\n                        style={{\r\n                            left: \"25%\",\r\n                            position: \"absolute\",\r\n                            top: \"72px\",\r\n                            margin: 0,\r\n                            padding: 0\r\n                        }}\r\n                        width={windowWidth * 0.75}\r\n                        height={windowHeight - 75}\r\n                        ref={stageRef}>\r\n                        <Layer\r\n                            ref={layerRef}>\r\n                            <MindMap\r\n                                nodes={nodes}\r\n                                edges={edges}\r\n                                updateEdges={updateEdges}\r\n                                updateNode={updateNode}\r\n                                selectedNodeId={selectedNode.id}\r\n                                setSelectedNode={handleSelected}\r\n                                updateSearchIndex={updateSearchIndex}\r\n                            />\r\n                        </Layer>\r\n                    </Stage>\r\n                </div>\r\n                {selectedNode.id ?\r\n                    <NodeInfoPanel\r\n                        node={selectedNode}\r\n                        reference={getReferenceById(selectedNode.citationKey)}\r\n                        updateNode={updateNode}\r\n                        changeNodeColor={changeNodeColor}/> :\r\n                    <NodeInfoPanel\r\n                        node={selectedNode}\r\n                        updateNode={updateNode}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}