{"version":3,"sources":["enums/IconTypes.js","components/Node.js","components/Edge.js","components/MindMap.js","WindowDimensions.js","components/PriorityDropdown.js","components/ToolBar.js","components/NodeInfoPanel.js","components/ReferencesTable.js","App.js","serviceWorker.js","index.js"],"names":["IconTypes","Node","node","updateEdges","id","colors","setSelectedNode","selectedNodeId","updateNode","isInSearch","label","bibEntryId","priorityColors","useImage","readIcon","toReadIcon","priorityIcon","favouritedIcon","notFavouriteIcon","useState","priorityColor","setPriorityColor","useEffect","icons","includes","x","x_pos","y","y_pos","draggable","onDragMove","e","target","onClick","onMouseEnter","getStage","container","style","cursor","onMouseLeave","radius","width","height","offsetX","nodeWidth","offsetY","nodeHeight","cornerRadius","fill","strokeWidth","undefined","colour","stroke","text","align","verticalAlign","image","newIcons","filter","icon","push","Edge","x1","y1","x2","y2","pts","st","ct","en","lineCap","sceneFunc","context","shape","beginPath","moveTo","bezierCurveTo","strokeShape","MindMap","nodes","edges","makeStyles","canvas","left","position","useStyles","map","edge","key","startID","startX","startY","endX","endY","getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","CustomizedMenus","React","anchorEl","setAnchorEl","className","Button","event","currentTarget","src","Menu","keepMounted","open","Boolean","onClose","MenuItem","ListItemText","primary","memo","selectedNode","addNode","saveMap","deleteNode","searchNodes","linking","setLinking","unlinking","setUnlinking","inputRef","toolbar","textAlign","useRef","onkeydown","keyCode","ctrlKey","preventDefault","current","focus","Toolbar","component","Paper","size","aria-label","alt","color","paddingLeft","border","fontSize","marginRight","marginLeft","value","onChange","ref","placeholder","NodeInfoPanel","reference","changeNodeColor","classes","panel","top","right","backgroundColor","padding","labelInputRef","inputValue","setInputValue","Card","Typography","gutterBottom","variant","TextField","marginBottom","InputLabelProps","shrink","type","TableRow","TableCell","scope","Table","table","margin","TableBody","title","author","year","references","draggedRow","setReferences","TABLE_FILL","Array","Math","floor","length","console","log","renderText","substring","MAX_LENGTH","maxHeight","marginTop","hover","onDragStart","item","App","setNodes","setEdges","handleSelected","selected","removeEdge","addEdge","startNode","endNode","filteredEdges","startId","endId","newNode","newNodes","updateSearchIndex","idx","forEach","indexOf","fetchMap","wrapper","a","fetch","then","res","json","data","node1","find","node1_Id","node2","node2_Id","catch","fetchReferences","bibData","nodeLabel","citekey","random","citationKey","newEdge","layerRef","stageRef","shiftKey","ToolBar","convertedEdges","payload","JSON","stringify","method","headers","body","searchterm","indx","onDrop","setPointersPositions","getPointerPosition","onDragOver","newEdges","getReferenceById","nodeId","newColor","updateNodeColor","hex","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1ce83fa1.chunk.js","sourcesContent":["export const IconTypes = {\r\n    READ : \"READ\",\r\n    TO_READ : \"TO_READ\",\r\n    HIGH_PRIORITY : \"HIGH_PRIORITY\",\r\n    MEDIUM_PRIORITY : \"MEDIUM_PRIORITY\",\r\n    LOW_PRIORITY : \"LOW_PRIORITY\",\r\n    FAVOURITE : \"FAVOURITE\",\r\n    NOT_FAVOURITE : \"NOT_FAVOURITE\"\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Text, Group, Rect, Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport { IconTypes } from \"../enums/IconTypes\";\r\n\r\nconst Node = ({node, id, colors, updateEdges, setSelectedNode, selectedNodeId, updateNode, label, bibEntryId, isInSearch: isInSearch}) => {\r\n  \r\n  const priorityColors = ['none','yellow', 'orange', 'red'];\r\n  const [readIcon] = useImage('/assets/Read.png');\r\n  const [toReadIcon] = useImage('/assets/ToRead.png');\r\n  const [priorityIcon] = useImage('/assets/priority.png');\r\n  const [favouritedIcon] = useImage('/assets/Favourited.png');\r\n  const [notFavouriteIcon] = useImage('/assets/NotFavourited.png');\r\n\r\n  const nodeWidth = 170;\r\n  const nodeHeight = 80;\r\n\r\n  const [priorityColor, setPriorityColor] = useState();\r\n\r\n  // Set initial priority icon color \r\n  useEffect(() => {\r\n    if(node.icons) {\r\n      if (node.icons.includes(\"HIGH_PRIORITY\")) {\r\n        setPriorityColor(priorityColors[3]);\r\n      } else if(node.icons.includes(\"MEDIUM_PRIORITY\")) {\r\n        setPriorityColor(priorityColors[2]);\r\n      } else if(node.icons.includes(\"LOW_PRIORITY\")) {\r\n        setPriorityColor(priorityColors[1]);\r\n      }\r\n    }\r\n  })\r\n    const handleDragMove = (e) => {\r\n        node.x_pos = e.target.x()\r\n        node.y_pos = e.target.y()\r\n      updateNode(node);\r\n      updateEdges(node.id, e.target.x(), e.target.y());\r\n    }\r\n    \r\n    const toggleFavouritedIcon = () => {\r\n\r\n      if(node.icons){\r\n        let newIcons = [];\r\n        if(node.icons.includes(IconTypes.FAVOURITE)){\r\n          newIcons = node.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n          newIcons.push(IconTypes.NOT_FAVOURITE);\r\n        } else {\r\n          newIcons = node.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n          newIcons.push(IconTypes.FAVOURITE)\r\n        }\r\n        node.icons = newIcons;\r\n        updateNode(node);\r\n      }\r\n    }\r\n\r\n        \r\n    const toggleReadIcon = () => {\r\n\r\n      if(node.icons){\r\n        let newIcons = [];\r\n        if(node.icons.includes(IconTypes.READ)){\r\n          newIcons = node.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n          newIcons.push(IconTypes.TO_READ);\r\n        } else {\r\n          newIcons = node.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n          newIcons.push(IconTypes.READ)\r\n        }\r\n        node.icons = newIcons;\r\n        updateNode(node);\r\n      }\r\n    }\r\n\r\n\r\n    const togglePriority = () => {\r\n      if(node.icons){\r\n        let newIcons = [];\r\n        if(node.icons.includes(\"HIGH_PRIORITY\")){\r\n          newIcons = node.icons.filter((icon) => {return icon !== \"HIGH_PRIORITY\"});\r\n          setPriorityColor(priorityColors[0]);\r\n        } else if(node.icons.includes(\"MEDIUM_PRIORITY\")){\r\n          newIcons = node.icons.filter((icon) => {return icon !== \"MEDIUM_PRIORITY\"});\r\n          newIcons.push(\"HIGH_PRIORITY\");\r\n          setPriorityColor(priorityColors[3]);\r\n        } else if(node.icons.includes(\"LOW_PRIORITY\")){\r\n          newIcons = node.icons.filter((icon) => {return icon !== \"LOW_PRIORITY\"});\r\n          newIcons.push(\"MEDIUM_PRIORITY\");\r\n          setPriorityColor(priorityColors[2]);\r\n        } else {\r\n          newIcons.push(...node.icons);\r\n          newIcons.push(\"LOW_PRIORITY\")\r\n          setPriorityColor(priorityColors[1])\r\n        }\r\n        node.icons = newIcons;\r\n        updateNode(node);\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      <Group\r\n        id={node.id}\r\n        x={node.x_pos}\r\n        y={node.y_pos}\r\n        draggable\r\n        onDragMove={handleDragMove}\r\n        onClick={() => setSelectedNode(node)}\r\n        onMouseEnter={(e) => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"pointer\";\r\n        }}\r\n        onMouseLeave={e => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"default\";\r\n        }}\r\n      >\r\n        <Rect\r\n          //codes of this rect is to cover the edge under rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={nodeWidth}\r\n          height={nodeHeight}\r\n          offsetX={nodeWidth/2}\r\n          offsetY={nodeHeight/2}\r\n          cornerRadius={20}\r\n          fill={\"white\"}          \r\n          strokeWidth={4}\r\n        />\r\n\r\n        <Rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={nodeWidth}\r\n          height={nodeHeight}\r\n          offsetX={nodeWidth/2}\r\n          offsetY={nodeHeight/2}\r\n          cornerRadius={20}\r\n          fill={isInSearch ? \"#3f51b5\" : (selectedNodeId === node.id ? \"#a2b8e5\" : node.colour==undefined?\"white\":node.colour+\"80\")}\r\n          stroke={node.colour === undefined ? \"#6E6E6E\" : node.colour}\r\n          strokeWidth={4}\r\n        />\r\n        <Text text={node.label}\r\n          offsetX={nodeWidth/2}\r\n          offsetY={nodeHeight/2 + 10}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={nodeWidth}\r\n        height={nodeHeight}\r\n        />\r\n          <Group\r\n              width={nodeWidth}\r\n              height={nodeHeight}\r\n              offsetX={nodeWidth/2 -25}\r\n              offsetY={-nodeHeight/2 + 30}\r\n          >\r\n            <Image image={node.icons.includes(IconTypes.READ) ? readIcon : toReadIcon} width={24} height={24} offsetX={-50} onClick={toggleReadIcon}/> \r\n\r\n            {node.icons && <Image image={priorityIcon} width={24} height={24} offsetX={-20} fill={priorityColor !== 'none' ? priorityColor : selectedNodeId === node.id ? \"#a2b8e5\" : \"white\"} onClick={togglePriority}/>}\r\n\r\n            <Image image={node.icons.includes(IconTypes.FAVOURITE) ? favouritedIcon : notFavouriteIcon} width={24} height={24} offsetX={-80} onClick={toggleFavouritedIcon}/> \r\n\r\n\r\n          </Group>\r\n      </Group>\r\n    );\r\n  };\r\n  export default Node;\r\n","import React from 'react';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\n\r\nconst Edge = ({x1, y1, x2, y2}) => {\r\n    let pts = { st: [x1, y1],\r\n        ct: [x1, y2, x1, y2],\r\n        en: [x2, y2]\r\n    }\r\n\r\n    return (\r\n        // <Line  points={[x1, y1, x2, y2]} stroke=\"blue\"/>\r\n        <Shape stroke={\"#50618F\"}\r\n                strokeWidth={6}\r\n                lineCap={\"round\"}\r\n                sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(...pts.st);\r\n                    context.bezierCurveTo(...pts.ct,...pts.en);\r\n                    context.strokeShape(shape);\r\n                }}>\r\n        </Shape>\r\n    )\r\n}\r\n\r\nexport default Edge;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Node from \"./Node\";\r\nimport Edge from \"./Edge\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Group } from 'react-konva';\r\n\r\n\r\nconst MindMap = ({nodes, edges, updateEdges, setSelectedNode, selectedNodeId, updateNode}) => {\r\n    const useStyles = makeStyles({\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Group x={310}>\r\n            {edges.map((edge) =>\r\n                <Edge key={edge.startID} x1={edge.startX} y1={edge.startY} x2={edge.endX} y2={edge.endY}/>\r\n            )}\r\n            {nodes.map((node) =>\r\n                <Node node={node} key={node.id} label={node.label} colors={node.colors} id={node.id} x={node.x_pos} y={node.y_pos} colour={node.colour} updateEdges={updateEdges} selectedNodeId={selectedNodeId} setSelectedNode={setSelectedNode} updateNode={updateNode} isInSearch = {node.isInSearch}/>\r\n            )}\r\n        </ Group>\r\n    )\r\n}\r\n\r\nexport default MindMap;\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\r\n    return {\r\n        windowWidth,\r\n        windowHeight\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport \"../styling/PriorityDropdown.css\";\r\n\r\nexport default function CustomizedMenus() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"priority-menu\">\r\n      <Button\r\n        onClick={handleClick}\r\n      >\r\n        <img src=\"/assets/LowPriority.png\" className=\"main-button-icon\"></img>\r\n\r\n      </Button>\r\n      <Menu\r\n        id=\"customized-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem>\r\n        <img src=\"/assets/LowPriority.png\" className=\"menu-buttons\"></img>\r\n          <ListItemText primary=\"Low priority\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n            <img src=\"/assets/MediumPriority.png\" className=\"menu-buttons\"></img>\r\n          <ListItemText primary=\"Medium priority\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <img src=\"/assets/HighPriority.png\"className=\"menu-buttons\"></img>\r\n          <ListItemText primary=\"High priority\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useRef } from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport '../styling/Toolbar.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Button, Avatar } from '@material-ui/core';\r\nimport { IconTypes } from \"../enums/IconTypes\";\r\nimport PriorityDropdown from \"./PriorityDropdown\";\r\n\r\n\r\nconst MindMapToolbar = ({ selectedNode, updateNode, addNode, saveMap, deleteNode, searchNodes, linking, setLinking, unlinking, setUnlinking}) => {\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        toolbar: {\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const inputRef = useRef(null);\r\n\r\n\r\n     window.onkeydown = function(e)  {\r\n        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)){\r\n            // listen to ctrl + F\r\n            e.preventDefault();\r\n            inputRef.current.focus();\r\n        }\r\n    }\r\n\r\n    const toggleReadIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.READ)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n            newIcons.push(IconTypes.TO_READ);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n            newIcons.push(IconTypes.READ)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n      const toggleFavouritedIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.FAVOURITE)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n            newIcons.push(IconTypes.NOT_FAVOURITE);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n            newIcons.push(IconTypes.FAVOURITE)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n  \r\n\r\n    return(\r\n        <Toolbar className = 'toolbar-proportions' component = { Paper }>\r\n        <div className=\"buttons-container\">\r\n\r\n            <Button size=\"small\" aria-label = \"add\" onClick={() => addNode()} >\r\n                <img src=\"/assets/Add.png\" alt=\"Add\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <Button size=\"small\" onClick={() => setLinking(!linking)} color={linking ? 'primary' : 'default'} >\r\n                <img src=\"/assets/Link.png\" alt=\"Link\" className=\"toolbar-button \"/>\r\n            </Button>\r\n\r\n            <Button size=\"small\" onClick={() => setUnlinking(!unlinking)} color={linking ? 'primary' : 'default'} >\r\n                <img src=\"/assets/Unlink.png\" alt=\"Unlink\" className=\"toolbar-button \"/>\r\n            </Button>\r\n            <div className=\"divider\"></div>\r\n\r\n            <Button size=\"small\" onClick={toggleReadIcon}>\r\n                <img src=\"/assets/MarkRead.png\" alt=\"Read Status\" className=\"toolbar-button\"/>\r\n            </Button>\r\n\r\n            <PriorityDropdown />\r\n\r\n            <Button size=\"small\" onClick={toggleFavouritedIcon}>\r\n                <img src=\"/assets/Favourite.png\" alt=\"Favourite\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <div className=\"divider\"></div>\r\n\r\n            <Button size=\"small\" onClick={deleteNode}>\r\n                <img src=\"/assets/Trash.png\" alt=\"Delete Node\" className=\"trash-button\"/>\r\n            </Button>\r\n        </div>\r\n\r\n        <div className=\"search-container\">\r\n\r\n            <Button size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <img src=\"/assets/Save.png\" alt=\"Priority\" className=\"toolbar-button save-button\"/>\r\n            </Button>\r\n\r\n\r\n\r\n            <select style={{ border: 'none', textAlign: 'centre', fontSize: 14, marginRight: 30, marginLeft:30 }} >\r\n                <option value = \"noFilter\"> No Filter </option>\r\n                    <option value = \"highPriority\"> High Priority </option>\r\n                    <option value = \"favourites\"> Low Priority </option>\r\n                    <option value = \"favourites\"> Favourites </option>\r\n                </select>\r\n\r\n            <input className=\"search-bar\" id=\"outlined-basic\" onChange={searchNodes}  ref={inputRef } placeholder=\"Search...\" />\r\n\r\n            <Button size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <img src=\"/assets/Exit.png\" alt=\"Priority\" className=\"toolbar-button\"/>\r\n            </Button>\r\n        </div>\r\n\r\n    </Toolbar>\r\n    )\r\n}\r\n\r\nexport default React.memo(MindMapToolbar);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React\r\n    , {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport InputLabel\r\n    from \"@material-ui/core/InputLabel\";\r\nimport FormControl\r\n    from \"@material-ui/core/FormControl\";\r\nimport Input\r\n    from \"@material-ui/core/Input\";\r\nimport FormHelperText\r\n    from \"@material-ui/core/FormHelperText\";\r\nimport { CirclePicker } from 'react-color';\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    CardHeader\r\n} from \"@material-ui/core\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport TextField\r\n    from \"@material-ui/core/TextField\";\r\n\r\nconst NodeInfoPanel = ({node, reference, updateNode, changeNodeColor}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n       panel: {\r\n            position: \"absolute\",\r\n           top: '10%',\r\n           right: '1%',\r\n           width: \"300px\",\r\n           backgroundColor: \"white\",\r\n\r\n           '& td': {\r\n               border: \"none\",\r\n               padding: \"10px\"\r\n           },\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const labelInputRef = useRef();\r\n\r\n    const [inputValue, setInputValue] = useState();\r\n    useEffect(() => {\r\n        setInputValue(node.label)\r\n        labelInputRef.current.focus();\r\n    }, [node]);\r\n\r\n    const updateValue = (e) => {\r\n        setInputValue(e.target.value);\r\n        node.label = e.target.value;\r\n        updateNode(node);\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.panel}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                Node Info\r\n            </Typography>\r\n            <TextField style={{ width:\"calc(100% - 20px)\", marginBottom:\"10px\", marginLeft:\"10px\"}}  InputLabelProps={{shrink: true,}} id=\"standard-basic\" label=\"Label\" value={inputValue} type=\"text\" inputRef={labelInputRef} onChange={updateValue}/>\r\n            <TableRow key=\"colorEditor\">\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\", color: \"#3f51b5\"}}>\r\n                        Color:\r\n                    </TableCell>\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\"}}>\r\n                    {/*<input id='nodeColor' type=\"color\" value={ node.colour === undefined? 'black': node.colour} onChange = {changeNodeColor}></input>*/}\r\n                    <CirclePicker colors={['#BA1D2A', '#FC6A38', '#55773B', '#279DA3', '#0E5756']} onChange={changeNodeColor}/>\r\n                    </TableCell>\r\n                </TableRow>\r\n\r\n            {reference &&\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <Typography gutterBottom style={{paddingLeft: \"10px\", margin: 0}} variant=\"h5\" component=\"h5\" >\r\n                    BibEntry\r\n                </Typography>\r\n                <TableBody>\r\n                     <TableRow key={reference.title}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Title:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.title}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.author}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Author:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.author}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.year}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Year:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.year}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NodeInfoPanel;\r\n","import React from \"react\";\r\nimport \"../styling/ReferencesTable.css\";\r\nimport useWindowDimensions from \"../WindowDimensions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\nconst ReferencesTable = ({references, setReferences, draggedRow, addNode}) => {\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n    const MAX_LENGTH = 20;\r\n    const TABLE_FILL = new Array(Math.floor((windowHeight - (references.length * 20))/20));\r\n    TABLE_FILL.fill(\"\");\r\n    console.log(TABLE_FILL)\r\n\r\n    const renderText = (text) => {\r\n        if(text){\r\n            if(text.length > MAX_LENGTH) {\r\n                return `${text.substring(0, MAX_LENGTH - 3)}...` \r\n            } else {\r\n                return text;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"table-proportions\" style={{maxHeight: windowHeight}}>\r\n            <Card style={{width: \"99.5%\"}}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\", marginTop: \"15px\"}}>\r\n                    References\r\n                </Typography>\r\n                <div>\r\n                    <table key=\"reference-table\" hover=\"true\" size=\"small\" className=\"table-striped\">\r\n                        <thead key=\"table-header\">\r\n                        <tr key=\"table-header-row\">\r\n                            <th>Title</th>\r\n                            <th>Author</th>\r\n                            <th>Year</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody key=\"table-body\">\r\n                        {references &&\r\n                        references.map((ref) => (\r\n                            <tr key={ref.title}\r\n                            draggable={true}\r\n                            onDragStart={e => {\r\n                                draggedRow.current = ref\r\n                            }}>\r\n                                <td key={ref.title + \"-title\"} className=\"displayedText\">{renderText(ref.title)}<p className=\"fullText\">{ref.title}</p></td>\r\n                                <td key={ref.title + \"-author\"} className=\"displayedText\">{renderText(ref.author)}<p className=\"fullText\">{ref.author}</p></td>\r\n                                <td key={ref.title + \"-year\"}>{renderText(ref.year)}</td>\r\n                            </tr>\r\n                        ))}\r\n                        {TABLE_FILL.map((item) => (\r\n                            <tr>\r\n                                <td className=\"displayedText\">{item}</td>\r\n                                <td className=\"displayedText\"> </td>\r\n                                <td className=\"displayedText\"> </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ReferencesTable)\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport \"./App.css\";\r\nimport MindMap from \"./components/MindMap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { Layer, Stage } from 'react-konva';\r\nimport useWindowDimensions from './WindowDimensions';\r\nimport ToolBar from \"./components/ToolBar\";\r\nimport NodeInfoPanel from \"./components/NodeInfoPanel\";\r\nimport ReferencesTable from \"./components/ReferencesTable\";\r\nimport { IconTypes } from \"./enums/IconTypes\";\r\n\r\nfunction App() {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    const [edges, setEdges] = useState([]);\r\n\r\n    const [references, setReferences] = useState([{}]);\r\n\r\n    const [selectedNode, setSelectedNode] = useState({});\r\n\r\n    const [globalNodeIdCounter, setGlobalNodeIdCounter] = useState(4);\r\n\r\n    const [linking, setLinking] = useState(false);\r\n\r\n    const [unlinking, setUnlinking] = useState(false);\r\n\r\n    const getNodeById = (id) => {\r\n        return nodes.find(node => (node.id === id));\r\n    };\r\n\r\n    const handleSelected = (selected) => {\r\n        if(!linking && !unlinking){\r\n            setSelectedNode(selected);\r\n        } else if(unlinking){\r\n            removeEdge(selectedNode, selected);\r\n            setUnlinking(false);\r\n\r\n        } else if (linking) {\r\n            addEdge(selectedNode, selected);\r\n            setLinking(false);\r\n            setSelectedNode(selected);\r\n        }\r\n    }\r\n\r\n    const removeEdge = (startNode, endNode) => {\r\n\r\n        let filteredEdges = edges.filter((edge) => {\r\n            return (edge.startId === startNode.id && edge.endId === endNode.id) || (edge.startId === endNode.id && edge.endId === startNode.id)\r\n        });\r\n        setEdges(edges.filter((edge) => { return !filteredEdges.includes(edge)}));\r\n    }\r\n\r\n    const getReferenceById = (id) => {\r\n        for (const reference of references) {\r\n            if (reference.citekey === id) {\r\n                return reference;\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateNode = (newNode) => {\r\n        const newNodes = nodes.map((node) => {\r\n        if (newNode.id === node.id) {\r\n            return newNode;\r\n        } else {\r\n            return node;\r\n        }\r\n        });\r\n        setNodes(newNodes);\r\n    };\r\n\r\n    const updateNodeColor = (nodeId, newColor) => {\r\n\r\n        const newNodes = nodes.map((node) => {\r\n            if (node.id === nodeId) {\r\n                return {\r\n                    ...node,\r\n                    colour: newColor\r\n                };\r\n            }\r\n            return node;\r\n        });\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const updateSearchIndex = (idx) => {\r\n        // update the nodes in search, show red stroke\r\n        nodes.forEach(node => {\r\n            if(idx.indexOf(node.id) >-1){\r\n                node.isInSearch = true;\r\n            }\r\n            else\r\n            {\r\n                node.isInSearch = false;\r\n            }\r\n            updateNode(node)\r\n        });\r\n\r\n    }\r\n    const updateEdges = (id, x, y) => {\r\n        const newEdges = edges.map((edge) => {\r\n            if (edge.startId === id) {\r\n                return {\r\n                    ...edge,\r\n                    startX: x,\r\n                    startY: y,\r\n                };\r\n            }\r\n            if (edge.endId === id) {\r\n                return {\r\n                    ...edge,\r\n                    endX: x,\r\n                    endY: y,\r\n                };\r\n            }\r\n            return edge;\r\n        });\r\n        setEdges(newEdges);\r\n    };\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        wrapper: {\r\n            position: \"relative\",\r\n        },\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const fetchMap = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/map\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                //setNodes(data.nodes);\r\n                setNodes(data.nodes.map(node => {\r\n                   if(node.id === -1) {\r\n                       return {\r\n                           ...node,\r\n                           x_pos: windowWidth/8,\r\n                           y_pos: windowHeight/3\r\n                       }\r\n                   } else {\r\n                       return node;\r\n                   }\r\n                }));\r\n                setEdges(\r\n                data.edges.map(edge => {\r\n                    let node1 = data.nodes.find(node => node.id === edge.node1_Id);\r\n                    let node2 = data.nodes.find(node => node.id === edge.node2_Id);\r\n                    return {\r\n                        startId: edge.node1_Id,\r\n                        startX: node1.x_pos,\r\n                        startY: node1.y_pos,\r\n                        endId: edge.node2_Id,\r\n                        endX: node2.x_pos,\r\n                        endY: node2.y_pos,\r\n                    };\r\n                }));\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    const searchNodes = (event) =>{\r\n        // TODO: currently search node from id, should add label search, icon search\r\n        var searchterm = event.target.value;\r\n        var indx = [];\r\n\r\n        if(searchterm === ''){\r\n            updateSearchIndex(indx)\r\n            return;\r\n        }\r\n\r\n        nodes.forEach((node) => {\r\n            if(node.label.indexOf(searchterm)>-1) {\r\n                indx.push(node.id);\r\n            }\r\n        });\r\n\r\n        updateSearchIndex(indx)\r\n    }\r\n\r\n    const changeNodeColor = (color, event) =>{\r\n        updateNodeColor(selectedNode.id, color.hex);\r\n    }\r\n\r\n    const fetchReferences = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/entries\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setReferences(data);\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchReferences();\r\n        fetchMap();\r\n    }, []);\r\n\r\n    const saveMap = () => {\r\n        const convertedEdges = edges.map(edge => {\r\n            return {\r\n                node1_Id: edge.startId,\r\n                node2_Id: edge.endId\r\n            }\r\n        });\r\n        const payload = JSON.stringify({\r\n            \"nodes\": nodes,\r\n            \"edges\": convertedEdges\r\n        });\r\n        fetch('http://localhost:9898/libraries/current/map', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: payload\r\n        });\r\n    }\r\n\r\n    const addNode = (bibData, x_pos, y_pos) => {\r\n        if (selectedNode.id !== undefined) {\r\n            let nodeLabel;\r\n            let bibEntryId;\r\n            if (bibData === undefined) {\r\n                nodeLabel = `New Node`\r\n            } else {\r\n                bibEntryId = bibData.citekey;\r\n                nodeLabel = bibData.title;\r\n            }\r\n            if (x_pos === undefined) {\r\n                x_pos = 0;\r\n            }\r\n            if (y_pos === undefined) {\r\n                y_pos = 400;\r\n            }\r\n            const newNode = {\r\n                id: Math.floor(Math.random() * 1000000000),\r\n                label: nodeLabel,\r\n                x_pos: x_pos,\r\n                y_pos: y_pos,\r\n                citationKey: bibEntryId,\r\n                icons: [ IconTypes.TO_READ, IconTypes.LOW_PRIORITY, IconTypes.NOT_FAVOURITE ]\r\n            }\r\n\r\n        setNodes([...nodes, newNode]);\r\n        addEdge(selectedNode, newNode);\r\n        handleSelected(newNode);\r\n    }\r\n  }\r\n\r\n  const addEdge = (node1, node2) => {\r\n    if(node1.id !== node2.id) {\r\n        const newEdge = {\r\n            startId: node1.id,\r\n            startX: node1.x_pos,\r\n            startY: node1.y_pos,\r\n            endId: node2.id,\r\n            endX: node2.x_pos,\r\n            endY: node2.y_pos\r\n        }\r\n        setEdges([...edges,newEdge])\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n    const deleteNode = () => {\r\n        if (selectedNode.id !== undefined && selectedNode.id !== -1) {\r\n            setNodes(nodes.filter((node) => {return node.id !== selectedNode.id}));\r\n            setEdges(edges.filter((edge) => { return edge.startId !== selectedNode.id && edge.endId !== selectedNode.id }));\r\n            setSelectedNode(nodes[0]);\r\n        }\r\n    }\r\n\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n    const draggedRow = useRef();\r\n\r\n    window.addEventListener('keydown',  function(e)  {\r\n\r\n        if(e.shiftKey && e.keyCode===13) {\r\n            //above\r\n            addNode(undefined,selectedNode.x_pos,selectedNode.y_pos-200);\r\n        }\r\n        else if(e.keyCode=== 13) {\r\n            //below\r\n            addNode(undefined,selectedNode.x_pos,selectedNode.y_pos+200);\r\n        }\r\n        else if(e.keyCode=== 45)\r\n        {\r\n            //insert\r\n            addNode(undefined,selectedNode.x_pos-200,selectedNode.y_pos+200);\r\n        }\r\n    },false);\r\n\r\n\r\n    return (\r\n      <div className=\"container\">\r\n\r\n            <ReferencesTable\r\n                draggedRow={draggedRow}\r\n                addNode={addNode}\r\n                references={references}\r\n                setReferences={setReferences}\r\n                className=\"references\"\r\n            />\r\n\r\n            <div className=\"map-container\">\r\n            <ToolBar\r\n              selectedNode={selectedNode}\r\n              updateNode={updateNode}\r\n              addNode={addNode}\r\n              saveMap={saveMap}\r\n              deleteNode={deleteNode}\r\n              searchNodes = {searchNodes}\r\n              linking={linking}\r\n              setLinking={setLinking}\r\n              unlinking={unlinking}\r\n              setUnlinking={setUnlinking}\r\n            />\r\n\r\n\r\n            <div\r\n                onDrop={e => {\r\n                    // register event position\r\n                    stageRef.current.setPointersPositions(e);\r\n                    const {x, y} = stageRef.current.getPointerPosition();\r\n                    addNode(draggedRow.current, x - windowHeight * 0.25 - 75, y);\r\n                }}\r\n                onDragOver={e => e.preventDefault()}\r\n            >\r\n                <Stage\r\n                    style={{left: \"25%\", position: \"absolute\", top: \"64px\", margin: 0, padding: 0}}\r\n                    width={windowWidth * 0.75}\r\n                    height={windowHeight - 64}\r\n                    ref={stageRef}>\r\n                    <Layer\r\n                        ref={layerRef}>\r\n\r\n                        <MindMap\r\n                            nodes={nodes}\r\n                            edges={edges}\r\n                            updateEdges={updateEdges}\r\n                            updateNode={updateNode}\r\n                            selectedNodeId={selectedNode.id}\r\n                            setSelectedNode={handleSelected}\r\n                            updateSearchIndex = {updateSearchIndex}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            {selectedNode.id ? <NodeInfoPanel node={selectedNode} reference={getReferenceById(selectedNode.citationKey)} updateNode={updateNode} changeNodeColor={changeNodeColor}/> :\r\n                <NodeInfoPanel node={selectedNode} updateNode={updateNode} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}