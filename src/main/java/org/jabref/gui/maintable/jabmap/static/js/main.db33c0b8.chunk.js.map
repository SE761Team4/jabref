{"version":3,"sources":["Node.js","Edge.js","MindMap.js","KonvaReferencesTable.js","WindowDimensions.js","ToolBar.js","NodeInfoPanel.js","App.js","serviceWorker.js","index.js"],"names":["Node","node","updateEdges","id","setSelectedNode","selectedNodeId","updateNode","label","bibEntryId","x","x_pos","y","y_pos","draggable","onDragMove","e","target","onClick","radius","width","height","offsetX","offsetY","cornerRadius","fill","stroke","text","align","verticalAlign","citationKey","Edge","x1","y1","x2","y2","pts","st","ct","en","strokeWidth","lineCap","sceneFunc","context","shape","beginPath","moveTo","bezierCurveTo","strokeShape","MindMap","nodes","edges","window","innerWidth","innerHeight","makeStyles","canvas","left","position","useStyles","map","edge","startX","startY","endX","endY","key","colour","React","memo","references","addNode","setReferences","layerRef","stageRef","arrLength","table","top","maxWidth","overflow","tableLayout","backgroundColor","length","elRefs","useRef","current","Array","_","i","createRef","reference","index","title","opacity","ref","onDragEnd","draw","getPointerPosition","citekey","getWindowDimensions","windowWidth","windowHeight","saveMap","deleteNode","console","log","classes","toolbar","textAlign","className","Button","NodeInfoPanel","panel","right","labelInputRef","useState","inputValue","setInputValue","useEffect","focus","Card","Typography","gutterBottom","variant","component","style","TextField","marginBottom","marginLeft","value","type","inputRef","onChange","Table","aria-label","TableBody","TableRow","TableCell","scope","author","year","App","setNodes","setEdges","selectedNode","newNode","newNodes","wrapper","fetchMap","a","fetch","then","res","json","data","node1","find","node1_Id","node2","node2_Id","startId","endId","catch","fetchReferences","bibData","undefined","nodeLabel","Math","floor","random","newEdge","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","ToolBar","convertedEdges","payload","JSON","stringify","method","body","filter","newEdges","getReferenceById","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yOA0DiBA,EAtDJ,SAAC,GAA6F,IAA5FC,EAA2F,EAA3FA,KAAUC,GAAiF,EAArFC,GAAqF,EAAjFD,aAAaE,EAAoE,EAApEA,gBAAiBC,EAAmD,EAAnDA,eAAgBC,EAAmC,EAAnCA,WAAmC,EAAvBC,MAAuB,EAAhBC,WAWtF,OACE,kBAAC,QAAD,CACEL,GAAIF,EAAKE,GACTM,EAAGR,EAAKS,MACRC,EAAGV,EAAKW,MACRC,WAAS,EACTC,WAfmB,SAACC,GACpBd,EAAKS,MAAQK,EAAEC,OAAOP,IACtBR,EAAKW,MAAQG,EAAEC,OAAOL,IACxBL,EAAWL,GACXC,EAAYD,EAAKE,GAAIY,EAAEC,OAAOP,IAAKM,EAAEC,OAAOL,MAY1CM,QAAS,kBAAMb,EAAgBH,KAE/B,kBAAC,OAAD,CACEiB,OAAQ,CAAC,EAAM,GAAI,EAAM,IACzBC,MAbQ,IAcRC,OAbS,GAcTC,QAASF,GACTG,QAASF,GACTG,aAAc,GACdC,KAAMnB,IAAmBJ,EAAKE,GAAK,UAAY,QAC/CsB,OAAQ,UAEV,kBAAC,OAAD,CAAMC,KAAMzB,EAAKM,MACfc,QAASF,GACTG,QAASF,GACXO,MAAM,SACNC,cAAc,SACdT,MA1BU,IA2BVC,OA1BW,KA4BT,kBAAC,QAAD,CACID,MA9BI,IA+BJC,OA9BK,GA+BLC,QAASF,GACTG,SAAS,IAERrB,EAAK4B,aAAe,kBAAC,OAAD,CACrBV,MAAO,GACPC,OAAQ,GACRI,KAAM,WC1BLM,EArBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,GACnBC,EAAM,CAAEC,GAAI,CAACL,EAAIC,GACjBK,GAAI,CAACN,EAAIG,EAAIH,EAAIG,GACjBI,GAAI,CAACL,EAAIC,IAGb,OAEI,kBAAC,QAAD,CAAOT,OAAQ,UACPc,YAAa,EACbC,QAAS,QACTC,UAAW,SAACC,EAASC,GACjBD,EAAQE,YACRF,EAAQG,OAAR,MAAAH,EAAO,YAAWP,EAAIC,KACtBM,EAAQI,cAAR,MAAAJ,EAAO,YAAkBP,EAAIE,IAAtB,mBAA4BF,EAAIG,MACvCI,EAAQK,YAAYJ,O,SCazBK,EAvBC,SAAC,GAA8E,IAA7EC,EAA4E,EAA5EA,MAAOC,EAAqE,EAArEA,MAAOhD,EAA8D,EAA9DA,YAAaE,EAAiD,EAAjDA,gBAAiBC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,WAC5D6C,OAAOC,WACND,OAAOE,YACJC,YAAW,CACzBC,OAAQ,CACJC,KAAM,MACNC,SAAU,aAGFC,GAEhB,OACI,kBAAC,QAAD,CAAOjD,EAAG,KACLyC,EAAMS,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,CAAM7B,GAAI6B,EAAKC,OAAQ7B,GAAI4B,EAAKE,OAAQ7B,GAAI2B,EAAKG,KAAM7B,GAAI0B,EAAKI,UAEnEf,EAAMU,KAAI,SAAC1D,GAAD,OACP,kBAAC,EAAD,CAAMA,KAAMA,EAAMgE,IAAKhE,EAAKE,GAAII,MAAON,EAAKM,MAAOJ,GAAIF,EAAKE,GAAIM,EAAGR,EAAKS,MAAOC,EAAGV,EAAKW,MAAOsD,OAAQjE,EAAKiE,OAAQhE,YAAaA,EAAaG,eAAgBA,EAAgBD,gBAAiBA,EAAiBE,WAAYA,SCsF5N6D,MAAMC,MAhGQ,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,WAA2BC,GAAiC,EAAhDC,cAAgD,EAAjCD,SAASE,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAqBnEC,GAlBYpB,YAAW,CACzBqB,MAAO,CACHlB,SAAU,WACVD,KAAM,EACNoB,IAAK,EACLC,SAAU,MAEVC,SAAU,SACVC,YAAa,QACb3D,OAAQ,QACR4D,gBAAiB,YAGTtB,GAKEW,EAAWY,QACvBC,EAASf,IAAMgB,OAAO,IAS5B,OAPID,EAAOE,QAAQH,SAAWP,IAE1BQ,EAAOE,QAAUC,MAAMX,GAAWlD,OAAOmC,KAAI,SAAC2B,EAAGC,GAAJ,OAAUL,EAAOE,QAAQG,IAAMC,0BAM5E,kBAAC,QAAD,KACKnB,EAAWV,KAAI,SAAC8B,EAAWC,GACxB,OACA,kBAAC,QAAD,KACI,kBAAC,QAAD,CACI/E,EAAQ,IAAL+E,GACH,kBAAC,OAAD,CACIvE,MAtBV,IAuBUC,OAtBT,IAuBSI,KAAM,YAIV,kBAAC,OAAD,CACIE,KAAM+D,EAAUE,MAChBlF,EAAGU,IACHR,EAAGS,GAGHD,MAAO,IACPC,OAAQ,MAKhB,kBAAC,QAAD,CAEIwE,QAAS,GACT/E,WAAS,EACTgF,IAAKX,EAAOE,QAAQM,GACpBjC,SAAU,CAAChD,EAAE,EAAGE,EAAQ,IAAL+E,GACnBI,UAAW,WAEPZ,EAAOE,QAAQM,GAAON,QAAQ3B,SAAS,CAAChD,EAAI,EAAGE,EAAS,IAAL+E,IAEnDlB,EAASY,QAAQW,OAJJ,MAKEtB,EAASW,QAAQY,qBAAzBvF,EALM,EAKNA,EAAGE,EALG,EAKHA,EACV2D,EAAQmB,EAAWhF,EAAI,IAAKE,EAAG8E,EAAUQ,WAE7C,kBAAC,OAAD,CACI9E,MAvDV,IAwDUC,OAvDT,IAwDSI,KAAM,YAGV,kBAAC,OAAD,CACIE,KAAM+D,EAAUE,MAChBlF,EAAGU,IACHR,EAAGS,GAGHD,MAAO,IACPC,OAAQ,cC/FpC,SAAS8E,IAAuB,IAAD,EACoC/C,OAC/D,MAAO,CACHgD,YAHuB,EACnB/C,WAGJgD,aAJuB,EACM/C,a,aCsDtBc,MAAMC,MArDL,SAAC,GAAoC,IAAnCE,EAAkC,EAAlCA,QAAS+B,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAChCC,QAAQC,IAAI,kBAEZ,IAMMC,EANYnD,YAAW,CACzBoD,QAAS,CACLvF,MAAO,OACPwF,UAAW,WAGHjD,GAmChB,OACI,yBAAKkD,UAAWH,EAAQC,SACpB,kBAACG,EAAA,EAAD,CAAQ5F,QAAS,kBAAMqD,MAAvB,YACA,kBAACuC,EAAA,EAAD,CAAQ5F,QAAS,kBAAMoF,MAAvB,YACC,kBAACQ,EAAA,EAAD,CAAQ5F,QAASqF,GAAjB,mB,+DC8CEQ,EAvEO,SAAC,GAAmC,IAAlC7G,EAAiC,EAAjCA,KAAMwF,EAA2B,EAA3BA,UAAWnF,EAAgB,EAAhBA,WAa/BmG,EAVYnD,YAAW,CAC1ByD,MAAO,CACFtD,SAAU,WACXmB,IAAK,GACLoC,MAAO,GACP7F,MAAO,QACPC,OAAQ,QACR4D,gBAAiB,YAGRtB,GACVuD,EAAgB9B,mBAd+B,EAgBjB+B,qBAhBiB,mBAgB9CC,EAhB8C,KAgBlCC,EAhBkC,KAiBrDC,qBAAU,WACND,EAAcnH,EAAKM,OACnB0G,EAAc7B,QAAQkC,UACvB,CAACrH,IAQJ,OACI,kBAACsH,EAAA,EAAD,CAAMX,UAAWH,EAAQM,OACrB,kBAACS,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAKC,MAAO,CAACjB,UAAU,WAAvE,aAGA,kBAACkB,EAAA,EAAD,CAAWD,MAAO,CAACzG,MAAM,MAAO2G,aAAa,OAAQC,WAAW,MAAO5H,GAAG,iBAAiBI,MAAM,QAAQyH,MAAOb,EAAYc,KAAK,OAAOC,SAAUjB,EAAekB,SAXrJ,SAACpH,GACjBqG,EAAcrG,EAAEC,OAAOgH,OACvB/H,EAAKM,MAAQQ,EAAEC,OAAOgH,MACtB1H,EAAWL,MASNwF,GACD,kBAAC2C,EAAA,EAAD,CAAOxB,UAAWH,EAAQ9B,MAAO0D,aAAW,gBACxC,kBAACb,EAAA,EAAD,CAAYC,cAAY,EAACG,MAAO,CAACG,WAAW,MAAOL,QAAQ,KAAKC,UAAU,MAA1E,YAGA,kBAACW,EAAA,EAAD,KACK,kBAACC,EAAA,EAAD,CAAUtE,IAAKwB,EAAUE,OACtB,kBAAC6C,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAAhC,UAGA,kBAACD,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAC3BhD,EAAUE,QAGnB,kBAAC4C,EAAA,EAAD,CAAUtE,IAAKwB,EAAUiD,QACrB,kBAACF,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAAhC,WAGA,kBAACD,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAC3BhD,EAAUiD,SAGnB,kBAACH,EAAA,EAAD,CAAUtE,IAAKwB,EAAUkD,MACrB,kBAACH,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAAhC,SAGA,kBAACD,EAAA,EAAD,CAAWb,UAAU,KAAKc,MAAM,OAC3BhD,EAAUkD,WCyMxBC,MA7Qf,WAAgB,IAAD,EACe1B,mBAAS,IADxB,mBACJjE,EADI,KACG4F,EADH,OAsBe3B,mBAAS,IAtBxB,mBAsBJhE,EAtBI,KAsBG4F,EAtBH,OA2CyB5B,mBAAS,CAAC,KA3CnC,mBA2CJ7C,EA3CI,KA2CQE,EA3CR,OA6C2B2C,mBAAS,IA7CpC,mBA6CN6B,EA7CM,KA6CQ3I,EA7CR,OA+CyC8G,mBAAS,GA/ClD,mBA6DP5G,GA7DO,UA6DM,SAAC0I,GAClB,IAAMC,EAAWhG,EAAMU,KAAI,SAAC1D,GAC1B,OAAI+I,EAAQ7I,IAAMF,EAAKE,GACd6I,EAEA/I,KAGX4I,EAASI,KAkCHxC,EATYnD,YAAW,CACzB4F,QAAS,CACLzF,SAAU,YAEdF,OAAQ,CACJC,KAAM,MACNC,SAAU,aAGFC,GAEVyF,EAAQ,uCAAG,sBAAAC,EAAA,sDACbC,MAAM,+CACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHlD,QAAQC,IAAIiD,GACZZ,EAASY,EAAKxG,OACd6F,EACAW,EAAKvG,MAAMS,KAAI,SAAAC,GACX,IAAI8F,EAAQD,EAAKxG,MAAM0G,MAAK,SAAA1J,GAAI,OAAIA,EAAKE,KAAOyD,EAAKgG,YACrDrD,QAAQC,IAAIkD,GACZ,IAAIG,EAAQJ,EAAKxG,MAAM0G,MAAK,SAAA1J,GAAI,OAAIA,EAAKE,KAAOyD,EAAKkG,YAErD,OADAvD,QAAQC,IAAIqD,GACL,CACHE,QAASnG,EAAKgG,SACd/F,OAAQ6F,EAAMhJ,MACdoD,OAAQ4F,EAAM9I,MACdoJ,MAAOpG,EAAKkG,SACZ/F,KAAM8F,EAAMnJ,MACZsD,KAAM6F,EAAMjJ,cAIvBqJ,MAAM1D,QAAQC,KAtBN,2CAAH,qDAyBR0D,EAAe,uCAAG,sBAAAd,EAAA,sDACpBC,MAAM,mDACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHlF,EAAckF,MAEjBQ,MAAM1D,QAAQC,KANC,2CAAH,qDASrBa,qBAAU,WACN6C,IACAf,MACD,IAEH,IAsBM7E,EAAU,SAAC6F,EAASzJ,EAAOE,GAC7B,QAAwBwJ,IAApBrB,EAAa5I,GAAkB,CAE/B,IAAIkK,EACA7J,EAFJ+F,QAAQC,IAAIuC,QAGIqB,IAAZD,EACAE,EAAS,YAET7J,EAAa2J,EAAQlE,QACrBoE,EAAYF,EAAQxE,YAEVyE,IAAV1J,IACAA,EAAQ,QAEE0J,IAAVxJ,IACAA,EAAQ,KAEZ,IAAMoI,EAAU,CACZ7I,GAAImK,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBjK,MAAO8J,EACP3J,MAAOA,EACPE,MAAOA,EACPiB,YAAarB,GAGrBqI,EAAS,GAAD,mBAAK5F,GAAL,CAAY+F,KAEhB,IAAMyB,EAAU,CACZV,QAAShB,EAAa5I,GACtB0D,OAAQkF,EAAarI,MACrBoD,OAAQiF,EAAanI,MACrBoJ,MAAOhB,EAAQ7I,GACf4D,KAAMiF,EAAQtI,MACdsD,KAAMgF,EAAQpI,OAGtBkI,EAAS,GAAD,mBAAK5F,GAAL,CAAYuH,OAWlBjG,EAAWW,mBACXV,EAAWU,mBAtNN,EHVA,WAAgC,IAAD,EACM+B,mBAAShB,KADf,mBACnCwE,EADmC,KACjBC,EADiB,KAY1C,OATAtD,qBAAU,WACN,SAASuD,IACLD,EAAoBzE,KAIxB,OADA/C,OAAO0H,iBAAiB,SAAUD,GAC3B,kBAAMzH,OAAO2H,oBAAoB,SAAUF,MACnD,IAEIF,EGsN6BK,GAA7B3E,EAxNI,EAwNJA,aAAcD,EAxNV,EAwNUA,YAErB,OACI,yBACIS,UAAWH,EAAQyC,SAenB,kBAAC8B,EAAD,CACE1G,QAASA,EACT+B,QA7FM,WACZE,QAAQC,IAAIvD,GACZ,IAAIgI,EAAiB/H,EAAMS,KAAI,SAAAC,GAC3B,MAAO,CACHgG,SAAUhG,EAAKmG,QACfD,SAAUlG,EAAKoG,UAGnBkB,EAAUC,KAAKC,UAAU,CACzB,MAAUnI,EACV,MAAUgI,IAEd1E,QAAQC,IAAI0E,GACZ7B,MAAM,8CAA+C,CACjDgC,OAAQ,MAIRC,KAAMJ,KA4EJ5E,WAhCS,gBACS8D,IAApBrB,EAAa5I,KACb0I,EAAS5F,EAAMsI,QAAO,SAACtL,GAAU,OAAOA,EAAKE,KAAO4I,EAAa5I,OACjE2I,EAAS5F,EAAMqI,QAAO,SAAC3H,GAAW,OAAOA,EAAKmG,UAAYhB,EAAa5I,IAAMyD,EAAKoG,QAAUjB,EAAa5I,WA+BzG,kBAAC,QAAD,CACIgB,MAAOgF,EACP/E,OAAQgF,EACRP,IAAKpB,GACL,kBAAC,QAAD,CACIoB,IAAKrB,GACL,kBAAC,EAAD,CACIH,WAAYA,EACZE,cAAeA,EACfD,QAASA,EACTE,SAAUA,EACVC,SAAUA,IACd,kBAAC,EAAD,CACIxB,MAAOA,EACPC,MAAOA,EACPhD,YAvLA,SAACC,EAAIM,EAAGE,GACxB,IAAM6K,EAAWtI,EAAMS,KAAI,SAACC,GACxB,OAAIA,EAAKmG,UAAY5J,EACV,2BACAyD,GADP,IAEIC,OAAQpD,EACRqD,OAAQnD,IAGZiD,EAAKoG,QAAU7J,EACR,2BACAyD,GADP,IAEIG,KAAMtD,EACNuD,KAAMrD,IAGPiD,KAEXkF,EAAS0C,IAsKOlL,WAAYA,EACZD,eAAgB0I,EAAa5I,GAC7BC,gBAAiBA,MAI5B2I,EAAa5I,GAAK,kBAAC,EAAD,CAAeF,KAAM8I,EAActD,UAjNvC,SAACtF,GAAQ,IAAD,gBACLkE,GADK,IAC7B,2BAAoC,CAAC,IAA1BoB,EAAyB,QAChC,GAAIA,EAAUQ,UAAY9F,EACtB,OAAOsF,GAHc,+BAiN0CgG,CAAiB1C,EAAalH,aAAcvB,WAAYA,IACrH,kBAAC,EAAD,CAAeL,KAAM8I,EAAczI,WAAYA,MClR3CoL,QACW,cAA7BvI,OAAOwI,SAASC,UAEe,UAA7BzI,OAAOwI,SAASC,UAEhBzI,OAAOwI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLjG,QAAQiG,MAAMA,EAAMC,a","file":"static/js/main.db33c0b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Ellipse, Text, Group, Rect } from 'react-konva';\r\n\r\n\r\nconst Node = ({node, id, updateEdges, setSelectedNode, selectedNodeId, updateNode, label, bibEntryId}) => {\r\n\r\n    const handleDragMove = (e) => {\r\n        node.x_pos = e.target.x()\r\n        node.y_pos = e.target.y()\r\n      updateNode(node);\r\n      updateEdges(node.id, e.target.x(), e.target.y());\r\n    }\r\n\r\n    const width = 150\r\n    const height = 70\r\n    return (\r\n      <Group\r\n        id={node.id}\r\n        x={node.x_pos}\r\n        y={node.y_pos}\r\n        draggable\r\n        onDragMove={handleDragMove}\r\n        onClick={() => setSelectedNode(node)}\r\n      >\r\n        <Rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={width}\r\n          height={height}\r\n          offsetX={width/2}\r\n          offsetY={height/2}\r\n          cornerRadius={20}\r\n          fill={selectedNodeId === node.id ? \"#a2b8e5\" : \"white\"}\r\n          stroke={\"black\"}\r\n        />\r\n        <Text text={node.label}\r\n          offsetX={width/2}\r\n          offsetY={height/2 + 10}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={width}\r\n        height={height}\r\n        />\r\n          <Group\r\n              width={width}\r\n              height={height}\r\n              offsetX={width/2 -10}\r\n              offsetY={-height/2 + 20}\r\n          >\r\n              {node.citationKey && <Rect\r\n              width={10}\r\n              height={10}\r\n              fill={\"red\"}\r\n              />}\r\n          </Group>\r\n      </Group>\r\n    );\r\n  };\r\n\r\n  export default Node;\r\n","import React from 'react';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\n\r\nconst Edge = ({x1, y1, x2, y2}) => {\r\n    let pts = { st: [x1, y1],\r\n        ct: [x1, y2, x1, y2],\r\n        en: [x2, y2]\r\n    }\r\n\r\n    return (\r\n        // <Line  points={[x1, y1, x2, y2]} stroke=\"blue\"/>\r\n        <Shape stroke={\"#50618F\"}\r\n                strokeWidth={6}\r\n                lineCap={\"round\"}\r\n                sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(...pts.st);\r\n                    context.bezierCurveTo(...pts.ct,...pts.en);\r\n                    context.strokeShape(shape);\r\n                }}>\r\n        </Shape>\r\n    )\r\n}\r\n\r\nexport default Edge;\r\n","import React from \"react\";\r\n//import logo from './logo.svg';\r\nimport \"./App.css\";\r\nimport Node from \"./Node\";\r\nimport Edge from \"./Edge\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Stage, Layer, Group } from 'react-konva';\r\n\r\n\r\nconst MindMap = ({nodes, edges, updateEdges, setSelectedNode, selectedNodeId, updateNode}) => {\r\n    const width = window.innerWidth * 0.75;\r\n    const height = window.innerHeight;\r\n    const useStyles = makeStyles({\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Group x={310}>\r\n            {edges.map((edge) =>\r\n                <Edge x1={edge.startX} y1={edge.startY} x2={edge.endX} y2={edge.endY}/>\r\n            )}\r\n            {nodes.map((node) =>\r\n                <Node node={node} key={node.id} label={node.label} id={node.id} x={node.x_pos} y={node.y_pos} colour={node.colour} updateEdges={updateEdges} selectedNodeId={selectedNodeId} setSelectedNode={setSelectedNode} updateNode={updateNode}/>\r\n            )}\r\n        </ Group>\r\n    )\r\n}\r\n\r\nexport default MindMap;\r\n","import React, {\r\n    createRef,\r\n    useRef\r\n} from \"react\";\r\nimport {Paper, TableContainer, Table, TableCell, TableBody, TableRow, TableHead} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Rect,\r\n    Group,\r\n    Text\r\n} from 'react-konva';\r\n\r\n\r\n\r\n\r\nconst KonvaReferencesTable = ({references, setReferences, addNode, layerRef, stageRef}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            maxWidth: \"25%\",\r\n            // minWidth: \"200px\",\r\n            overflow: \"hidden\",\r\n            tableLayout: \"fixed\",\r\n            height: \"100vh\",\r\n            backgroundColor: \"#e1e1e1\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const width = 300;\r\n    const height = 100;\r\n    const margin = 10;\r\n\r\n    const arrLength = references.length;\r\n    const elRefs = React.useRef([]);\r\n\r\n    if (elRefs.current.length !== arrLength) {\r\n        // add or remove refs\r\n        elRefs.current = Array(arrLength).fill().map((_, i) => elRefs.current[i] || createRef());\r\n    }\r\n\r\n    //console.log(references)\r\n    //Rendered table using Material UI library\r\n    return(\r\n        <Group>\r\n            {references.map((reference, index) => {\r\n                return (\r\n                <Group>\r\n                    <Group\r\n                        y={index * (height + margin)}>\r\n                        <Rect\r\n                            width={width}\r\n                            height={height}\r\n                            fill={\"#dddddd\"}\r\n                            // opacity={0.5}\r\n                        />\r\n\r\n                        <Text\r\n                            text={reference.title}\r\n                            x={width / 2}\r\n                            y={height / 2}\r\n                            // align=\"center\"\r\n                            // verticalAlign=\"middle\"\r\n                            width={100}\r\n                            height={60}\r\n                        />\r\n                    </Group>\r\n\r\n                    {/*DRAGGABLE VERSION*/}\r\n                    <Group\r\n                        // y={index * (height + margin)}\r\n                        opacity={0.5}\r\n                        draggable\r\n                        ref={elRefs.current[index]}\r\n                        position={{x:0, y: index * (height + margin)}}\r\n                        onDragEnd={() => {\r\n                            //console.log(elRefs.current[index])\r\n                            elRefs.current[index].current.position({x : 0, y : index * (height + margin)})\r\n                            //console.log(layerRef)\r\n                            layerRef.current.draw()\r\n                            const {x, y} = stageRef.current.getPointerPosition()\r\n                            addNode(reference, x - 300, y, reference.citekey)\r\n                        }}>\r\n                        <Rect\r\n                            width={width}\r\n                            height={height}\r\n                            fill={\"#dddddd\"}\r\n                        />\r\n\r\n                        <Text\r\n                            text={reference.title}\r\n                            x={width / 2}\r\n                            y={height / 2}\r\n                            // align=\"center\"\r\n                            // verticalAlign=\"middle\"\r\n                            width={100}\r\n                            height={60}\r\n                        />\r\n                    </Group>\r\n                </ Group>\r\n                )\r\n            })}\r\n\r\n        </Group>\r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(KonvaReferencesTable)\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\r\n    return {\r\n        windowWidth,\r\n        windowHeight\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n// const Toolbar = ({nodes, edges, setNodes, setEdges, getNodeById, selectedNodeId, globalNodeIdCounter, setGlobalNodeIdCounter}) => {\r\n\r\n\r\nconst Toolbar = ({addNode, saveMap, deleteNode}) => {\r\n    console.log(\"toolbar render\")\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        toolbar: {\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    // const addNode = () => {\r\n    //     if (selectedNodeId !== \"\") {\r\n    //         const newNode = {\r\n    //             id: `node${globalNodeIdCounter}`,\r\n    //             x: 400,\r\n    //             y: 400\r\n    //         }\r\n    //         setGlobalNodeIdCounter(globalNodeIdCounter + 1);\r\n\r\n    //         setNodes([...nodes, newNode]);\r\n    //         const selectedNode = getNodeById(selectedNodeId);\r\n    //         const newEdge = {\r\n    //             startId: selectedNode.id,\r\n    //             startX:  selectedNode.x,\r\n    //             startY: selectedNode.y,\r\n    //             endId: newNode.id,\r\n    //             endX: newNode.x,\r\n    //             endY: newNode.y\r\n    //         }\r\n\r\n    //         setEdges([...edges, newEdge])\r\n    //     }\r\n    // }\r\n\r\n    // const deleteNode = () => {\r\n    //     if (selectedNodeId !== \"\") {\r\n    //         setNodes(nodes.filter((node) => {return node.id !== selectedNodeId}));\r\n    //         setEdges(edges.filter((edge) => { return edge.startId !== selectedNodeId && edge.endId !== selectedNodeId }));\r\n    //     }\r\n    // }\r\n\r\n    return(\r\n        <div className={classes.toolbar}>\r\n            <Button onClick={() => addNode()}>Add Node</Button>\r\n            <Button onClick={() => saveMap()}>Save Map</Button>\r\n             <Button onClick={deleteNode}>Delete Node</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Toolbar);\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React\r\n    , {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport InputLabel\r\n    from \"@material-ui/core/InputLabel\";\r\nimport FormControl\r\n    from \"@material-ui/core/FormControl\";\r\nimport Input\r\n    from \"@material-ui/core/Input\";\r\nimport FormHelperText\r\n    from \"@material-ui/core/FormHelperText\";\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    CardHeader\r\n} from \"@material-ui/core\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport TextField\r\n    from \"@material-ui/core/TextField\";\r\n\r\nconst NodeInfoPanel = ({node, reference, updateNode}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n       panel: {\r\n            position: \"absolute\",\r\n           top: 10,\r\n           right: 10,\r\n           width: \"300px\",\r\n           height: \"400px\",\r\n           backgroundColor: \"#dddddd\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const labelInputRef = useRef();\r\n\r\n    const [inputValue, setInputValue] = useState();\r\n    useEffect(() => {\r\n        setInputValue(node.label)\r\n        labelInputRef.current.focus();\r\n    }, [node]);\r\n\r\n    const updateValue = (e) => {\r\n        setInputValue(e.target.value);\r\n        node.label = e.target.value;\r\n        updateNode(node);\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.panel}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                Node Info\r\n            </Typography>\r\n            <TextField style={{width:\"90%\", marginBottom:\"20px\", marginLeft:\"5%\"}} id=\"standard-basic\" label=\"Label\" value={inputValue} type=\"text\" inputRef={labelInputRef} onChange={updateValue}/>\r\n            {reference &&\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <Typography gutterBottom style={{marginLeft:\"5%\"}} variant=\"h5\" component=\"h5\" >\r\n                    BibEntry\r\n                </Typography>\r\n                <TableBody>\r\n                     <TableRow key={reference.title}>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            Title:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.title}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.author}>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            Author:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.author}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.year}>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            Year:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.year}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n                }\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NodeInfoPanel;\r\n","import React, {\r\n    useState,\r\n    useEffect,\r\n    useRef\r\n} from \"react\";\r\n//import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport MindMap\r\n    from \"./MindMap\";\r\nimport KonvaReferencesTable\r\n    from \"./KonvaReferencesTable\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n    Layer,\r\n    Stage\r\n} from 'react-konva';\r\nimport useWindowDimensions\r\n    from './WindowDimensions';\r\nimport ToolBar\r\n    from \"./ToolBar\";\r\nimport NodeInfoPanel\r\n    from \"./NodeInfoPanel\";\r\n\r\nfunction App() {\r\n    const [nodes, setNodes] = useState([\r\n        // {\r\n        //     id: \"node1\",\r\n        //     label: \"dogs\",\r\n        //     x: 100,\r\n        //     y: 100,\r\n        // },\r\n        // {\r\n        //     id: \"node2\",\r\n        //     label: \"cats\",\r\n        //     x: 200,\r\n        //     y: 200,\r\n        // },\r\n        // {\r\n        //     id: \"node3\",\r\n        //     label: \"fish\",\r\n        //     x: 300,\r\n        //     y: 300,\r\n        // },\r\n    ]);\r\n\r\n    const [edges, setEdges] = useState([\r\n        // {\r\n        //     id: \"edge1\",\r\n        //     startId: nodes[0].id,\r\n        //     startX: nodes[0].x,\r\n        //     startY: nodes[0].y,\r\n        //     endId: nodes[1].id,\r\n        //     endX: nodes[1].x,\r\n        //     endY: nodes[1].y,\r\n        // },\r\n        // {\r\n        //     id: \"edge2\",\r\n        //     startId: nodes[1].id,\r\n        //     startX: nodes[1].x,\r\n        //     startY: nodes[1].y,\r\n        //     endId: nodes[2].id,\r\n        //     endX: nodes[2].x,\r\n        //     endY: nodes[2].y,\r\n        // },\r\n    ]);\r\n\r\n    const [references, setReferences] = useState([{}]);\r\n\r\n  const [selectedNode, setSelectedNode] = useState({});\r\n\r\n  const [globalNodeIdCounter, setGlobalNodeIdCounter] = useState(4);\r\n\r\n    const getNodeById = (id) => {\r\n        return nodes.find(node => (node.id === id));\r\n    };\r\n\r\n  const getReferenceById = (id) => {\r\n      for (const reference of references) {\r\n          if (reference.citekey === id) {\r\n              return reference;\r\n          }\r\n      }\r\n  }\r\n\r\n  const updateNode = (newNode) => {\r\n    const newNodes = nodes.map((node) => {\r\n      if (newNode.id == node.id) {\r\n        return newNode;\r\n      } else {\r\n        return node;\r\n      }\r\n    });\r\n    setNodes(newNodes);\r\n  };\r\n\r\n    const updateEdges = (id, x, y) => {\r\n        const newEdges = edges.map((edge) => {\r\n            if (edge.startId === id) {\r\n                return {\r\n                    ...edge,\r\n                    startX: x,\r\n                    startY: y,\r\n                };\r\n            }\r\n            if (edge.endId === id) {\r\n                return {\r\n                    ...edge,\r\n                    endX: x,\r\n                    endY: y,\r\n                };\r\n            }\r\n            return edge;\r\n        });\r\n        setEdges(newEdges);\r\n    };\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        wrapper: {\r\n            position: \"relative\",\r\n        },\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const fetchMap = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/map\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data);\r\n                setNodes(data.nodes);\r\n                setEdges(\r\n                data.edges.map(edge => {\r\n                    let node1 = data.nodes.find(node => node.id === edge.node1_Id);\r\n                    console.log(node1);\r\n                    let node2 = data.nodes.find(node => node.id === edge.node2_Id);\r\n                    console.log(node2);\r\n                    return {\r\n                        startId: edge.node1_Id,\r\n                        startX: node1.x_pos,\r\n                        startY: node1.y_pos,\r\n                        endId: edge.node2_Id,\r\n                        endX: node2.x_pos,\r\n                        endY: node2.y_pos,\r\n                    };\r\n                }));\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    const fetchReferences = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/entries\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setReferences(data);\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchReferences();\r\n        fetchMap();\r\n    }, []);\r\n\r\n    const saveMap = () => {\r\n        console.log(nodes);\r\n        var convertedEdges = edges.map(edge => {\r\n            return {\r\n                node1_Id: edge.startId,\r\n                node2_Id: edge.endId\r\n            }\r\n        })\r\n        var payload = JSON.stringify({\r\n            \"nodes\" : nodes,\r\n            \"edges\" : convertedEdges\r\n        })\r\n        console.log(payload);\r\n        fetch('http://localhost:9898/libraries/current/map', {\r\n            method: 'PUT',\r\n            // headers: {\r\n            //     'Content-Type': 'application/json'\r\n            // },\r\n            body: payload\r\n        });\r\n    }\r\n\r\n    const addNode = (bibData, x_pos, y_pos) => {\r\n        if (selectedNode.id !== undefined) {\r\n            console.log(selectedNode)\r\n            let nodeLabel;\r\n            let bibEntryId;\r\n            if (bibData === undefined) {\r\n                nodeLabel = `New Node`\r\n            } else {\r\n                bibEntryId = bibData.citekey;\r\n                nodeLabel = bibData.title;\r\n            }\r\n            if (x_pos === undefined) {\r\n                x_pos = 0;\r\n            }\r\n            if (y_pos === undefined) {\r\n                y_pos = 400;\r\n            }\r\n            const newNode = {\r\n                id: Math.floor(Math.random() * 1000000000),\r\n                label: nodeLabel,\r\n                x_pos: x_pos,\r\n                y_pos: y_pos,\r\n                citationKey: bibEntryId\r\n            }\r\n\r\n        setNodes([...nodes, newNode]);\r\n\r\n            const newEdge = {\r\n                startId: selectedNode.id,\r\n                startX: selectedNode.x_pos,\r\n                startY: selectedNode.y_pos,\r\n                endId: newNode.id,\r\n                endX: newNode.x_pos,\r\n                endY: newNode.y_pos\r\n            }\r\n\r\n        setEdges([...edges, newEdge])\r\n    }\r\n  }\r\n\r\n    const deleteNode = () => {\r\n        if (selectedNode.id !== undefined) {\r\n            setNodes(nodes.filter((node) => {return node.id !== selectedNode.id}));\r\n            setEdges(edges.filter((edge) => { return edge.startId !== selectedNode.id && edge.endId !== selectedNode.id }));\r\n        }\r\n    }\r\n\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n    return (\r\n        <div\r\n            className={classes.wrapper}>\r\n            {/* <ReferencesTable\r\n        references={references}\r\n        setReferences={setReferences}\r\n      ></ReferencesTable> */}\r\n            {/* <ToolBar\r\n        nodes={nodes}\r\n        edges={edges}\r\n        getNodeById={getNodeById}\r\n        selectedNodeId={selectedNodeId}\r\n        setNodes={setNodes}\r\n        setEdges={setEdges}\r\n        globalNodeIdCounter={globalNodeIdCounter}\r\n        setGlobalNodeIdCounter={setGlobalNodeIdCounter}\r\n      /> */}\r\n            <ToolBar\r\n              addNode={addNode}\r\n              saveMap={saveMap}\r\n              deleteNode={deleteNode}\r\n            />\r\n            <Stage\r\n                width={windowWidth}\r\n                height={windowHeight}\r\n                ref={stageRef}>\r\n                <Layer\r\n                    ref={layerRef}>\r\n                    <KonvaReferencesTable\r\n                        references={references}\r\n                        setReferences={setReferences}\r\n                        addNode={addNode}\r\n                        layerRef={layerRef}\r\n                        stageRef={stageRef}/>\r\n                    <MindMap\r\n                        nodes={nodes}\r\n                        edges={edges}\r\n                        updateEdges={updateEdges}\r\n                        updateNode={updateNode}\r\n                        selectedNodeId={selectedNode.id}\r\n                        setSelectedNode={setSelectedNode}\r\n                    />\r\n                </Layer>\r\n            </Stage>\r\n            {selectedNode.id ? <NodeInfoPanel node={selectedNode} reference={getReferenceById(selectedNode.citationKey)} updateNode={updateNode}/> :\r\n                <NodeInfoPanel node={selectedNode} updateNode={updateNode}/>}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}