{"version":3,"sources":["enums/IconTypes.js","components/NodeIcons.js","utils/utilFunctions.js","components/Node.js","components/Edge.js","components/MindMap.js","WindowDimensions.js","enums/Priorities.js","components/PriorityDropdown.js","components/ToolBar.js","components/NodeInfoPanel.js","components/ReferencesTable.js","App.js","serviceWorker.js","index.js"],"names":["IconTypes","NodeIcons","node","updateNode","useImage","readIcon","toReadIcon","highPriorityIcon","medPriorityIcon","lowPriorityIcon","favouritedIcon","notFavouriteIcon","useEffect","icons","toggleReadIcon","newIcons","includes","filter","icon","push","width","height","offsetX","NODE_WIDTH","offsetY","image","onClick","renderText","text","length","substring","MAX_LENGTH","Node","updateEdges","setSelectedNode","selectedNodeId","isInSearch","label","bibEntryId","id","x","x_pos","y","y_pos","draggable","onDragMove","e","target","onMouseEnter","getStage","container","style","cursor","onMouseLeave","radius","NODE_HEIGHT","cornerRadius","fill","strokeWidth","undefined","colour","stroke","align","verticalAlign","Edge","x1","y1","x2","y2","pts","st","ct","en","lineCap","sceneFunc","context","shape","beginPath","moveTo","bezierCurveTo","strokeShape","MindMap","nodes","edges","makeStyles","canvas","left","position","useStyles","map","edge","key","startID","startX","startY","endX","endY","getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","Priorities","React","memo","selectedNode","anchorEl","setAnchorEl","handleClose","pickPriority","event","textContent","className","Button","currentTarget","src","Menu","keepMounted","open","Boolean","onClose","MenuItem","alt","ListItemText","primary","addNode","saveMap","deleteNode","searchNodes","linking","setLinking","unlinking","setUnlinking","inputRef","toolbar","textAlign","useRef","onkeydown","keyCode","ctrlKey","preventDefault","current","focus","Toolbar","component","Paper","size","aria-label","color","paddingLeft","border","fontSize","marginRight","marginLeft","value","onChange","ref","placeholder","NodeInfoPanel","reference","changeNodeColor","classes","panel","top","right","backgroundColor","padding","labelInputRef","inputValue","setInputValue","Card","Typography","gutterBottom","variant","TextField","marginBottom","InputLabelProps","shrink","type","TableRow","TableCell","scope","colors","Table","table","margin","TableBody","title","author","year","references","draggedRow","setReferences","TABLE_FILL","Array","Math","floor","maxHeight","marginTop","hover","onDragStart","item","App","setNodes","setEdges","handleSelected","selected","removeEdge","addEdge","startNode","endNode","filteredEdges","startId","endId","newNode","newNodes","updateSearchIndex","idx","forEach","indexOf","fetchMap","wrapper","a","fetch","then","res","json","data","node1","find","node1_Id","node2","node2_Id","catch","console","log","fetchReferences","bibData","nodeLabel","citekey","random","citationKey","newEdge","layerRef","stageRef","shiftKey","ToolBar","convertedEdges","payload","JSON","stringify","method","headers","body","searchterm","indx","onDrop","setPointersPositions","getPointerPosition","onDragOver","newEdges","getReferenceById","nodeId","newColor","updateNodeColor","hex","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1d1244cd.chunk.js","sourcesContent":["export const IconTypes = {\r\n    READ : \"READ\",\r\n    TO_READ : \"TO_READ\",\r\n    HIGH_PRIORITY : \"HIGH_PRIORITY\",\r\n    MEDIUM_PRIORITY : \"MEDIUM_PRIORITY\",\r\n    LOW_PRIORITY : \"LOW_PRIORITY\",\r\n    FAVOURITE : \"FAVOURITE\",\r\n    NOT_FAVOURITE : \"NOT_FAVOURITE\"\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport useImage from 'use-image';\r\nimport { Image, Group } from 'react-konva';\r\nimport { IconTypes } from '../enums/IconTypes';\r\n\r\nconst NodeIcons = ({node, updateNode}) => {\r\n\r\n    const [readIcon] = useImage('/assets/Read.png');\r\n    const [toReadIcon] = useImage('/assets/ToRead.png');\r\n    const [highPriorityIcon] = useImage('/assets/HighPriority.png');\r\n    const [medPriorityIcon] = useImage('/assets/MediumPriority.png');\r\n    const [lowPriorityIcon] = useImage('/assets/LowPriority.png');\r\n    const [favouritedIcon] = useImage('/assets/Favourited.png');\r\n    const [notFavouriteIcon] = useImage('/assets/NotFavourited.png');\r\n\r\n    const NODE_WIDTH = 170;\r\n    const NODE_HEIGHT = 80;\r\n\r\n    useEffect(() => {\r\n\r\n      }, [node.icons])\r\n\r\n    const toggleFavouritedIcon = () => {\r\n\r\n        if(node.icons){\r\n          let newIcons = [];\r\n          if(node.icons.includes(IconTypes.FAVOURITE)){\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n            newIcons.push(IconTypes.NOT_FAVOURITE);\r\n          } else {\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n            newIcons.push(IconTypes.FAVOURITE)\r\n          }\r\n          node.icons = newIcons;\r\n          updateNode(node);\r\n        }\r\n      }\r\n  \r\n          \r\n      const toggleReadIcon = () => {\r\n  \r\n        if(node.icons){\r\n          let newIcons = [];\r\n          if(node.icons.includes(IconTypes.READ)){\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n            newIcons.push(IconTypes.TO_READ);\r\n          } else {\r\n            newIcons = node.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n            newIcons.push(IconTypes.READ)\r\n          }\r\n          node.icons = newIcons;\r\n          updateNode(node);\r\n        }\r\n      }\r\n  \r\n\r\n    return (\r\n        <Group\r\n        width={NODE_WIDTH}\r\n        height={NODE_HEIGHT}\r\n        offsetX={NODE_WIDTH/2 -10}\r\n        offsetY={-NODE_HEIGHT/2 + 20}>\r\n\r\n        <Image image={node.icons.includes(IconTypes.READ) ? readIcon : toReadIcon} width={24} height={24} offsetX={-50} onClick={toggleReadIcon}/> \r\n\r\n{node.icons.includes(IconTypes.HIGH_PRIORITY) &&\r\n    <Image image={highPriorityIcon} width={24} height={24} offsetX={-20} onClick={toggleReadIcon}></Image>\r\n\r\n}\r\n\r\n{node.icons.includes(IconTypes.MEDIUM_PRIORITY) &&\r\n    <Image image={medPriorityIcon} width={24} height={24} offsetX={-20} onClick={toggleReadIcon}></Image>\r\n\r\n}\r\n\r\n{node.icons.includes(IconTypes.LOW_PRIORITY) &&\r\n    <Image image={lowPriorityIcon} width={24} height={24} offsetX={-20} onClick={toggleReadIcon}></Image>\r\n\r\n}\r\n\r\n        <Image image={node.icons.includes(IconTypes.FAVOURITE) ? favouritedIcon : notFavouriteIcon} width={24} height={24} offsetX={-80} onClick={toggleFavouritedIcon}/>   \r\n    </Group>\r\n    );\r\n}\r\n\r\nexport default NodeIcons;","const MAX_LENGTH = 20;\r\n\r\n// function for limiting text length in table and nodes\r\nexport function renderText(text) {\r\n    if(text){\r\n        if(text.length > MAX_LENGTH) {\r\n            return `${text.substring(0, MAX_LENGTH - 3)}...` \r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Text, Group, Rect } from 'react-konva';\r\nimport NodeIcons from './NodeIcons';\r\nimport { renderText } from '../utils/utilFunctions';\r\n\r\nconst Node = ({node, updateEdges, setSelectedNode, selectedNodeId, updateNode, label, bibEntryId, isInSearch: isInSearch}) => {\r\n  \r\n  const NODE_WIDTH = 170;\r\n  const NODE_HEIGHT = 80;\r\n\r\n  const handleDragMove = (e) => {\r\n        node.x_pos = e.target.x()\r\n        node.y_pos = e.target.y()\r\n      updateNode(node);\r\n      updateEdges(node.id, e.target.x(), e.target.y());\r\n    }\r\n    \r\n    return (\r\n      <Group\r\n        id={node.id}\r\n        x={node.x_pos}\r\n        y={node.y_pos}\r\n        draggable\r\n        onDragMove={handleDragMove}\r\n        onClick={() => setSelectedNode(node)}\r\n        onMouseEnter={(e) => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"pointer\";\r\n        }}\r\n        onMouseLeave={e => {\r\n            const container = e.target.getStage().container();\r\n            container.style.cursor = \"default\";\r\n        }}\r\n      >\r\n        <Rect\r\n          // Codes of this rect is to cover the edge under rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={NODE_WIDTH}\r\n          height={NODE_HEIGHT}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2}\r\n          cornerRadius={20}\r\n          fill={\"white\"}          \r\n          strokeWidth={4}\r\n        />\r\n\r\n        <Rect\r\n          radius={{\"x\" : 50, \"y\" : 30}}\r\n          width={NODE_WIDTH}\r\n          height={NODE_HEIGHT}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2}\r\n          cornerRadius={20}\r\n          fill={isInSearch ? \"#3f51b5\" : (selectedNodeId === node.id ? \"#a2b8e5\" : node.colour==undefined?\"white\":node.colour+\"80\")}\r\n          stroke={node.colour === undefined ? \"#6E6E6E\" : node.colour}\r\n          strokeWidth={4}\r\n        />\r\n        <Text text={renderText(node.label)}\r\n          offsetX={NODE_WIDTH/2}\r\n          offsetY={NODE_HEIGHT/2 + 10}\r\n        align=\"center\"\r\n        verticalAlign=\"middle\"\r\n        width={NODE_WIDTH}\r\n        height={NODE_HEIGHT}\r\n        />\r\n        <NodeIcons node={node} updateNode={updateNode}></NodeIcons> \r\n      </Group>\r\n    );\r\n  };\r\n  export default Node;\r\n","import React from 'react';\r\nimport { Line, Shape } from 'react-konva';\r\n\r\n\r\nconst Edge = ({x1, y1, x2, y2}) => {\r\n    let pts = { st: [x1, y1],\r\n        ct: [x1, y2, x1, y2],\r\n        en: [x2, y2]\r\n    }\r\n\r\n    return (\r\n        // <Line  points={[x1, y1, x2, y2]} stroke=\"blue\"/>\r\n        <Shape stroke={\"#50618F\"}\r\n                strokeWidth={6}\r\n                lineCap={\"round\"}\r\n                sceneFunc={(context, shape) => {\r\n                    context.beginPath();\r\n                    context.moveTo(...pts.st);\r\n                    context.bezierCurveTo(...pts.ct,...pts.en);\r\n                    context.strokeShape(shape);\r\n                }}>\r\n        </Shape>\r\n    )\r\n}\r\n\r\nexport default Edge;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport Node from \"./Node\";\r\nimport Edge from \"./Edge\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Group } from 'react-konva';\r\n\r\nconst MindMap = ({nodes, edges, updateEdges, setSelectedNode, selectedNodeId, updateNode}) => {\r\n    const useStyles = makeStyles({\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Group x={310}>\r\n            {edges.map((edge) =>\r\n                <Edge key={edge.startID} x1={edge.startX} y1={edge.startY} x2={edge.endX} y2={edge.endY}/>\r\n            )}\r\n            {nodes.map((node) =>\r\n                <Node node={node} key={node.id} label={node.label} x={node.x_pos} y={node.y_pos} colour={node.colour} updateEdges={updateEdges} selectedNodeId={selectedNodeId} setSelectedNode={setSelectedNode} updateNode={updateNode} isInSearch = {node.isInSearch}/>\r\n            )}\r\n        </ Group>\r\n    )\r\n}\r\n\r\nexport default MindMap;\r\n","import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\r\n    return {\r\n        windowWidth,\r\n        windowHeight\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","export const Priorities = {\r\n    HIGH : \"High priority\",\r\n    MEDIUM : \"Medium priority\",\r\n    LOW : \"Low priority\"\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport \"../styling/PriorityDropdown.css\";\r\nimport { Priorities } from \"../enums/Priorities\";\r\nimport { IconTypes } from \"../enums/IconTypes\";\r\n\r\nconst PriorityDropdown = ({selectedNode, updateNode}) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const pickPriority = (event) => {\r\n      if (selectedNode.icons)\r\n      {\r\n        if (event.target.textContent == Priorities.HIGH)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.MEDIUM_PRIORITY && icon !== IconTypes.LOW_PRIORITY});\r\n          newIcons.push(IconTypes.HIGH_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n        else if (event.target.textContent == Priorities.MEDIUM)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.HIGH_PRIORITY && icon !== IconTypes.LOW_PRIORITY});\r\n          newIcons.push(IconTypes.MEDIUM_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n      }\r\n        else if (event.target.textContent == Priorities.LOW)\r\n        {\r\n          let newIcons = [];\r\n          newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.MEDIUM_PRIORITY && icon !== IconTypes.HIGH_PRIORITY});\r\n          newIcons.push(IconTypes.LOW_PRIORITY);\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n      handleClose();\r\n  }\r\n\r\n  return (\r\n    <div className=\"priority-menu\">\r\n      <Button\r\n        onClick={handleClick}\r\n      >\r\n        <img src={\"./assets/LowPriority.png\"} className=\"main-button-icon\"/>\r\n\r\n      </Button>\r\n      <Menu\r\n        id=\"customized-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={pickPriority}>\r\n        <img src={\"./assets/LowPriority.png\"} alt=\"low-priority\" className=\"menu-buttons\"/>\r\n            <ListItemText primary={Priorities.LOW} />\r\n        </MenuItem>\r\n        <MenuItem onClick={pickPriority}>\r\n            <img src={\"./assets/MediumPriority.png\"} alt=\"medium-priority\" className=\"menu-buttons\"/>\r\n            <ListItemText primary={Priorities.MEDIUM} />\r\n        </MenuItem>\r\n        <MenuItem onClick={pickPriority}>\r\n          <img src={\"/assets/HighPriority.png\"} alt=\"high-priority\" className=\"menu-buttons\"/>\r\n            <ListItemText primary={Priorities.HIGH} />\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(PriorityDropdown)\r\n","import React, {useRef } from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport '../styling/Toolbar.css';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Button } from '@material-ui/core';\r\nimport { IconTypes } from \"../enums/IconTypes\";\r\nimport PriorityDropdown from \"./PriorityDropdown\";\r\n\r\n\r\nconst MindMapToolbar = ({ selectedNode, updateNode, addNode, saveMap, deleteNode, searchNodes, linking, setLinking, unlinking, setUnlinking}) => {\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        toolbar: {\r\n            width: \"100%\",\r\n            textAlign: \"center\"\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const inputRef = useRef(null);\r\n\r\n\r\n     window.onkeydown = function(e)  {\r\n        if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)){\r\n            // listen to ctrl + F\r\n            e.preventDefault();\r\n            inputRef.current.focus();\r\n        }\r\n    }\r\n\r\n    const toggleReadIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.READ)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.READ});\r\n            newIcons.push(IconTypes.TO_READ);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.TO_READ});\r\n            newIcons.push(IconTypes.READ)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n      const toggleFavouritedIcon = () => {\r\n\r\n        if(selectedNode.icons){\r\n          let newIcons = [];\r\n          if(selectedNode.icons.includes(IconTypes.FAVOURITE)){\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.FAVOURITE});\r\n            newIcons.push(IconTypes.NOT_FAVOURITE);\r\n          } else {\r\n            newIcons = selectedNode.icons.filter((icon) => {return icon !== IconTypes.NOT_FAVOURITE});\r\n            newIcons.push(IconTypes.FAVOURITE)\r\n          }\r\n          selectedNode.icons = newIcons;\r\n          updateNode(selectedNode);\r\n        }\r\n      }\r\n\r\n\r\n    return(\r\n        <Toolbar className = 'toolbar-proportions' component = { Paper }>\r\n        <div className=\"buttons-container\">\r\n\r\n            <Button size=\"small\" aria-label = \"add\" onClick={() => addNode()} >\r\n                <img src={\"./assets/Add.png\"} alt=\"Add\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <Button size=\"small\" onClick={() => setLinking(!linking)} color={linking ? 'primary' : 'default'} >\r\n                <img src={\"./assets/Link.png\"} alt=\"Link\" className=\"toolbar-button \"/>\r\n            </Button>\r\n\r\n            <Button size=\"small\" onClick={() => setUnlinking(!unlinking)} color={linking ? 'primary' : 'default'} >\r\n                <img src={\"./assets/Unlink.png\"} alt=\"Unlink\" className=\"toolbar-button \"/>\r\n            </Button>\r\n            <div className=\"divider\"/>\r\n\r\n            <Button size=\"small\" onClick={toggleReadIcon}>\r\n                <img src={\"./assets/MarkRead.png\"} alt=\"Read Status\" className=\"toolbar-button\"/>\r\n            </Button>\r\n\r\n            <PriorityDropdown selectedNode={selectedNode} updateNode={updateNode}/>\r\n\r\n            <Button size=\"small\" onClick={toggleFavouritedIcon}>\r\n                <img src={\"./assets/Favourite.png\"} alt=\"Favourite\" className=\"toolbar-button\"/>\r\n            </Button>\r\n            <div className=\"divider\"/>\r\n\r\n            <Button size=\"small\" onClick={deleteNode}>\r\n                <img src={\"./assets/Trash.png\"} alt=\"Delete Node\" className=\"trash-button\"/>\r\n            </Button>\r\n        </div>\r\n\r\n        <div className=\"search-container\">\r\n\r\n            <Button size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <img src={\"./assets/Save.png\"} alt=\"Priority\" className=\"toolbar-button save-button\"/>\r\n            </Button>\r\n            \r\n            <select style={{ border: 'none', textAlign: 'centre', fontSize: 14, marginRight: 30, marginLeft:30 }} >\r\n                <option value = \"noFilter\"> No Filter </option>\r\n                    <option value = \"highPriority\"> High Priority </option>\r\n                    <option value = \"favourites\"> Low Priority </option>\r\n                    <option value = \"favourites\"> Favourites </option>\r\n                </select>\r\n\r\n            <input className=\"search-bar\" id=\"outlined-basic\" onChange={searchNodes}  ref={inputRef } placeholder=\"Search...\" />\r\n\r\n            <Button size=\"small\" onClick={() => saveMap()} style={{paddingLeft: '0.5em'}}>\r\n                <img src={\"./assets/Exit.png\"} alt=\"Priority\" className=\"toolbar-button\"/>\r\n            </Button>\r\n        </div>\r\n\r\n    </Toolbar>\r\n    )\r\n}\r\n\r\nexport default React.memo(MindMapToolbar);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React\r\n    , {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport InputLabel\r\n    from \"@material-ui/core/InputLabel\";\r\nimport FormControl\r\n    from \"@material-ui/core/FormControl\";\r\nimport Input\r\n    from \"@material-ui/core/Input\";\r\nimport FormHelperText\r\n    from \"@material-ui/core/FormHelperText\";\r\nimport { CirclePicker } from 'react-color';\r\nimport Card\r\n    from \"@material-ui/core/Card\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    CardHeader\r\n} from \"@material-ui/core\";\r\nimport Typography\r\n    from \"@material-ui/core/Typography\";\r\nimport TextField\r\n    from \"@material-ui/core/TextField\";\r\n\r\nconst NodeInfoPanel = ({node, reference, updateNode, changeNodeColor}) => {\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n       panel: {\r\n            position: \"absolute\",\r\n           top: '10%',\r\n           right: '1%',\r\n           width: \"300px\",\r\n           backgroundColor: \"white\",\r\n\r\n           '& td': {\r\n               border: \"none\",\r\n               padding: \"10px\"\r\n           },\r\n        }\r\n    });\r\n    const classes = useStyles();\r\n    const labelInputRef = useRef();\r\n\r\n    const [inputValue, setInputValue] = useState();\r\n    useEffect(() => {\r\n        setInputValue(node.label)\r\n        labelInputRef.current.focus();\r\n    }, [node]);\r\n\r\n    const updateValue = (e) => {\r\n        setInputValue(e.target.value);\r\n        node.label = e.target.value;\r\n        updateNode(node);\r\n    }\r\n\r\n    return(\r\n        <Card className={classes.panel}>\r\n            <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\"}}>\r\n                Node Info\r\n            </Typography>\r\n            <TextField style={{ width:\"calc(100% - 20px)\", marginBottom:\"10px\", marginLeft:\"10px\"}}  InputLabelProps={{shrink: true,}} id=\"standard-basic\" label=\"Label\" value={inputValue} type=\"text\" inputRef={labelInputRef} onChange={updateValue}/>\r\n            <TableRow key=\"colorEditor\">\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\", color: \"#3f51b5\"}}>\r\n                        Color:\r\n                    </TableCell>\r\n                    <TableCell component=\"td\" scope=\"row\" style ={{border: \"none\"}}>\r\n                    {/*<input id='nodeColor' type=\"color\" value={ node.colour === undefined? 'black': node.colour} onChange = {changeNodeColor}></input>*/}\r\n                    <CirclePicker colors={['#BA1D2A', '#FC6A38', '#55773B', '#279DA3', '#0E5756']} onChange={changeNodeColor}/>\r\n                    </TableCell>\r\n                </TableRow>\r\n\r\n            {reference &&\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <Typography gutterBottom style={{paddingLeft: \"10px\", margin: 0}} variant=\"h5\" component=\"h5\" >\r\n                    BibEntry\r\n                </Typography>\r\n                <TableBody>\r\n                     <TableRow key={reference.title}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Title:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.title}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.author}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Author:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.author}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={reference.year}>\r\n                        <TableCell component=\"td\" scope=\"row\" style={{color: \"#3f51b5\"}}>\r\n                            Year:\r\n                        </TableCell>\r\n                        <TableCell component=\"td\" scope=\"row\">\r\n                            {reference.year}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>}\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NodeInfoPanel;\r\n","import React from \"react\";\r\nimport \"../styling/ReferencesTable.css\";\r\nimport useWindowDimensions from \"../WindowDimensions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { renderText } from '../utils/utilFunctions';\r\n\r\n\r\nconst ReferencesTable = ({references, setReferences, draggedRow, addNode}) => {\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n    const TABLE_FILL = new Array(Math.floor((windowHeight - (references.length * 20))/20));\r\n    TABLE_FILL.fill(\"\");\r\n\r\n    return (\r\n        <div className=\"table-proportions\" style={{maxHeight: windowHeight}}>\r\n            <Card style={{width: \"99.5%\"}}>\r\n                <Typography gutterBottom variant=\"h4\" component=\"h4\" style={{textAlign:\"center\", marginTop: \"15px\"}}>\r\n                    References\r\n                </Typography>\r\n                <div>\r\n                    <table key=\"reference-table\" hover=\"true\" size=\"small\" className=\"table-striped\">\r\n                        <thead key=\"table-header\">\r\n                        <tr key=\"table-header-row\">\r\n                            <th>Title</th>\r\n                            <th>Author</th>\r\n                            <th>Year</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody key=\"table-body\">\r\n                        {references &&\r\n                        references.map((ref) => (\r\n                            <tr key={ref.title}\r\n                            draggable={true}\r\n                            onDragStart={e => {\r\n                                draggedRow.current = ref\r\n                            }}>\r\n                                <td key={ref.title + \"-title\"} className=\"displayedText\">{renderText(ref.title)}<p className=\"fullText\">{ref.title}</p></td>\r\n                                <td key={ref.title + \"-author\"} className=\"displayedText\">{renderText(ref.author)}<p className=\"fullText\">{ref.author}</p></td>\r\n                                <td key={ref.title + \"-year\"}>{renderText(ref.year)}</td>\r\n                            </tr>\r\n                        ))}\r\n                        {TABLE_FILL.map((item) => (\r\n                            <tr>\r\n                                <td className=\"displayedText\">{item}</td>\r\n                                <td className=\"displayedText\"> </td>\r\n                                <td className=\"displayedText\"> </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ReferencesTable)\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from \"react\";\r\nimport \"./App.css\";\r\nimport MindMap from \"./components/MindMap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { Layer, Stage } from 'react-konva';\r\nimport useWindowDimensions from './WindowDimensions';\r\nimport ToolBar from \"./components/ToolBar\";\r\nimport NodeInfoPanel from \"./components/NodeInfoPanel\";\r\nimport ReferencesTable from \"./components/ReferencesTable\";\r\nimport { IconTypes } from \"./enums/IconTypes\";\r\n\r\nfunction App() {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    const [edges, setEdges] = useState([]);\r\n\r\n    const [references, setReferences] = useState([{}]);\r\n\r\n    const [selectedNode, setSelectedNode] = useState({});\r\n\r\n    const [globalNodeIdCounter, setGlobalNodeIdCounter] = useState(4);\r\n\r\n    const [linking, setLinking] = useState(false);\r\n\r\n    const [unlinking, setUnlinking] = useState(false);\r\n\r\n    const getNodeById = (id) => {\r\n        return nodes.find(node => (node.id === id));\r\n    };\r\n\r\n    const handleSelected = (selected) => {\r\n        if(!linking && !unlinking){\r\n            setSelectedNode(selected);\r\n        } else if(unlinking){\r\n            removeEdge(selectedNode, selected);\r\n            setUnlinking(false);\r\n\r\n        } else if (linking) {\r\n            addEdge(selectedNode, selected);\r\n            setLinking(false);\r\n            setSelectedNode(selected);\r\n        }\r\n    }\r\n\r\n    const removeEdge = (startNode, endNode) => {\r\n\r\n        let filteredEdges = edges.filter((edge) => {\r\n            return (edge.startId === startNode.id && edge.endId === endNode.id) || (edge.startId === endNode.id && edge.endId === startNode.id)\r\n        });\r\n        setEdges(edges.filter((edge) => { return !filteredEdges.includes(edge)}));\r\n    }\r\n\r\n    const getReferenceById = (id) => {\r\n        for (const reference of references) {\r\n            if (reference.citekey === id) {\r\n                return reference;\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateNode = (newNode) => {\r\n        const newNodes = nodes.map((node) => {\r\n        if (newNode.id === node.id) {\r\n            return newNode;\r\n        } else {\r\n            return node;\r\n        }\r\n        });\r\n        setNodes(newNodes);\r\n    };\r\n\r\n    const updateNodeColor = (nodeId, newColor) => {\r\n\r\n        const newNodes = nodes.map((node) => {\r\n            if (node.id === nodeId) {\r\n                return {\r\n                    ...node,\r\n                    colour: newColor\r\n                };\r\n            }\r\n            return node;\r\n        });\r\n        setNodes(newNodes);\r\n    }\r\n\r\n    const updateSearchIndex = (idx) => {\r\n        // update the nodes in search, show red stroke\r\n        nodes.forEach(node => {\r\n            if(idx.indexOf(node.id) >-1){\r\n                node.isInSearch = true;\r\n            }\r\n            else\r\n            {\r\n                node.isInSearch = false;\r\n            }\r\n            updateNode(node)\r\n        });\r\n\r\n    }\r\n    const updateEdges = (id, x, y) => {\r\n        const newEdges = edges.map((edge) => {\r\n            if (edge.startId === id) {\r\n                return {\r\n                    ...edge,\r\n                    startX: x,\r\n                    startY: y,\r\n                };\r\n            }\r\n            if (edge.endId === id) {\r\n                return {\r\n                    ...edge,\r\n                    endX: x,\r\n                    endY: y,\r\n                };\r\n            }\r\n            return edge;\r\n        });\r\n        setEdges(newEdges);\r\n    };\r\n\r\n    //Styles\r\n    const useStyles = makeStyles({\r\n        wrapper: {\r\n            position: \"relative\",\r\n        },\r\n        canvas: {\r\n            left: \"25%\",\r\n            position: \"absolute\"\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const fetchMap = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/map\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                //setNodes(data.nodes);\r\n                setNodes(data.nodes.map(node => {\r\n                   if(node.id === -1) {\r\n                       return {\r\n                           ...node,\r\n                           x_pos: windowWidth/8,\r\n                           y_pos: windowHeight/3\r\n                       }\r\n                   } else {\r\n                       return node;\r\n                   }\r\n                }));\r\n                setEdges(\r\n                data.edges.map(edge => {\r\n                    let node1 = data.nodes.find(node => node.id === edge.node1_Id);\r\n                    let node2 = data.nodes.find(node => node.id === edge.node2_Id);\r\n                    return {\r\n                        startId: edge.node1_Id,\r\n                        startX: node1.x_pos,\r\n                        startY: node1.y_pos,\r\n                        endId: edge.node2_Id,\r\n                        endX: node2.x_pos,\r\n                        endY: node2.y_pos,\r\n                    };\r\n                }));\r\n            })\r\n            .catch(\"Error: \" + console.log);\r\n    }\r\n\r\n    const searchNodes = (event) =>{\r\n        // TODO: currently search node from id, should add label search, icon search\r\n        var searchterm = event.target.value;\r\n        var indx = [];\r\n\r\n        if(searchterm === ''){\r\n            updateSearchIndex(indx)\r\n            return;\r\n        }\r\n\r\n        nodes.forEach((node) => {\r\n            if(node.label.indexOf(searchterm)>-1) {\r\n                indx.push(node.id);\r\n            }\r\n        });\r\n\r\n        updateSearchIndex(indx)\r\n    }\r\n\r\n    const changeNodeColor = (color, event) =>{\r\n        updateNodeColor(selectedNode.id, color.hex);\r\n    }\r\n\r\n    const fetchReferences = async () => {\r\n        fetch(\"http://localhost:9898/libraries/current/entries\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setReferences(data);\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchReferences();\r\n        fetchMap();\r\n    }, []);\r\n\r\n    const saveMap = () => {\r\n        const convertedEdges = edges.map(edge => {\r\n            return {\r\n                node1_Id: edge.startId,\r\n                node2_Id: edge.endId\r\n            }\r\n        });\r\n        const payload = JSON.stringify({\r\n            \"nodes\": nodes,\r\n            \"edges\": convertedEdges\r\n        });\r\n        fetch('http://localhost:9898/libraries/current/map', {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: payload\r\n        });\r\n    }\r\n\r\n    const addNode = (bibData, x_pos, y_pos) => {\r\n        if (selectedNode.id !== undefined) {\r\n            let nodeLabel;\r\n            let bibEntryId;\r\n            if (bibData === undefined) {\r\n                nodeLabel = `New Node`\r\n            } else {\r\n                bibEntryId = bibData.citekey;\r\n                nodeLabel = bibData.title;\r\n            }\r\n            if (x_pos === undefined) {\r\n                x_pos = 0;\r\n            }\r\n            if (y_pos === undefined) {\r\n                y_pos = 400;\r\n            }\r\n            const newNode = {\r\n                id: Math.floor(Math.random() * 1000000000),\r\n                label: nodeLabel,\r\n                x_pos: x_pos,\r\n                y_pos: y_pos,\r\n                citationKey: bibEntryId,\r\n                icons: [ IconTypes.TO_READ, IconTypes.LOW_PRIORITY, IconTypes.NOT_FAVOURITE ]\r\n            }\r\n\r\n        setNodes([...nodes, newNode]);\r\n        addEdge(selectedNode, newNode);\r\n        handleSelected(newNode);\r\n    }\r\n  }\r\n\r\n  const addEdge = (node1, node2) => {\r\n    if(node1.id !== node2.id) {\r\n        const newEdge = {\r\n            startId: node1.id,\r\n            startX: node1.x_pos,\r\n            startY: node1.y_pos,\r\n            endId: node2.id,\r\n            endX: node2.x_pos,\r\n            endY: node2.y_pos\r\n        }\r\n        setEdges([...edges,newEdge])\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n    const deleteNode = () => {\r\n        if (selectedNode.id !== undefined && selectedNode.id !== -1) {\r\n            setNodes(nodes.filter((node) => {return node.id !== selectedNode.id}));\r\n            setEdges(edges.filter((edge) => { return edge.startId !== selectedNode.id && edge.endId !== selectedNode.id }));\r\n            setSelectedNode(nodes[0]);\r\n        }\r\n    }\r\n\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n\r\n    const {windowHeight, windowWidth} = useWindowDimensions();\r\n\r\n    const draggedRow = useRef();\r\n\r\n    window.addEventListener('keydown',  function(e)  {\r\n\r\n        if(e.shiftKey && e.keyCode===13) {\r\n            //above\r\n            addNode(undefined,selectedNode.x_pos,selectedNode.y_pos-200);\r\n        }\r\n        else if(e.keyCode=== 13) {\r\n            //below\r\n            addNode(undefined,selectedNode.x_pos,selectedNode.y_pos+200);\r\n        }\r\n        else if(e.keyCode=== 45)\r\n        {\r\n            //insert\r\n            addNode(undefined,selectedNode.x_pos-200,selectedNode.y_pos+200);\r\n        }\r\n    },false);\r\n\r\n\r\n    return (\r\n      <div className=\"container\">\r\n\r\n            <ReferencesTable\r\n                draggedRow={draggedRow}\r\n                addNode={addNode}\r\n                references={references}\r\n                setReferences={setReferences}\r\n                className=\"references\"\r\n            />\r\n\r\n            <div className=\"map-container\">\r\n            <ToolBar\r\n              selectedNode={selectedNode}\r\n              updateNode={updateNode}\r\n              addNode={addNode}\r\n              saveMap={saveMap}\r\n              deleteNode={deleteNode}\r\n              searchNodes = {searchNodes}\r\n              linking={linking}\r\n              setLinking={setLinking}\r\n              unlinking={unlinking}\r\n              setUnlinking={setUnlinking}\r\n            />\r\n\r\n\r\n            <div\r\n                onDrop={e => {\r\n                    // register event position\r\n                    stageRef.current.setPointersPositions(e);\r\n                    const {x, y} = stageRef.current.getPointerPosition();\r\n                    addNode(draggedRow.current, x - windowHeight * 0.25 - 75, y);\r\n                }}\r\n                onDragOver={e => e.preventDefault()}\r\n            >\r\n                <Stage\r\n                    style={{left: \"25%\", position: \"absolute\", top: \"64px\", margin: 0, padding: 0}}\r\n                    width={windowWidth * 0.75}\r\n                    height={windowHeight - 64}\r\n                    ref={stageRef}>\r\n                    <Layer\r\n                        ref={layerRef}>\r\n\r\n                        <MindMap\r\n                            nodes={nodes}\r\n                            edges={edges}\r\n                            updateEdges={updateEdges}\r\n                            updateNode={updateNode}\r\n                            selectedNodeId={selectedNode.id}\r\n                            setSelectedNode={handleSelected}\r\n                            updateSearchIndex = {updateSearchIndex}\r\n                        />\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            {selectedNode.id ? <NodeInfoPanel node={selectedNode} reference={getReferenceById(selectedNode.citationKey)} updateNode={updateNode} changeNodeColor={changeNodeColor}/> :\r\n                <NodeInfoPanel node={selectedNode} updateNode={updateNode} />}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}